/*
 * generated by Xtext 2.13.0
 */
package esir.compilation.ide.contentassist.antlr;

import com.google.inject.Inject;
import esir.compilation.ide.contentassist.antlr.internal.InternalWhdslParser;
import esir.compilation.services.WhdslGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class WhdslParser extends AbstractContentAssistParser {

	@Inject
	private WhdslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalWhdslParser createParser() {
		InternalWhdslParser result = new InternalWhdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getCmdAlternatives_0(), "rule__Command__CmdAlternatives_0");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
					put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
					put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getIfAccess().getGroup_4(), "rule__If__Group_4__0");
					put(grammarAccess.getAffectAccess().getGroup(), "rule__Affect__Group__0");
					put(grammarAccess.getAffectAccess().getGroup_1(), "rule__Affect__Group_1__0");
					put(grammarAccess.getAffectAccess().getGroup_4(), "rule__Affect__Group_4__0");
					put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
					put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getExprAccess().getGroup_10(), "rule__Expr__Group_10__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
					put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
					put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
					put(grammarAccess.getExprConsAccess().getGroup(), "rule__ExprCons__Group__0");
					put(grammarAccess.getExprListAccess().getGroup(), "rule__ExprList__Group__0");
					put(grammarAccess.getExprHdAccess().getGroup(), "rule__ExprHd__Group__0");
					put(grammarAccess.getExprTlAccess().getGroup(), "rule__ExprTl__Group__0");
					put(grammarAccess.getExprSymAccess().getGroup(), "rule__ExprSym__Group__0");
					put(grammarAccess.getExprNotAccess().getGroup(), "rule__ExprNot__Group__0");
					put(grammarAccess.getExprEqAccess().getGroup(), "rule__ExprEq__Group__0");
					put(grammarAccess.getWhAccess().getElementsAssignment(), "rule__Wh__ElementsAssignment");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getDefinitionAssignment_3(), "rule__Function__DefinitionAssignment_3");
					put(grammarAccess.getDefinitionAccess().getInputAssignment_1(), "rule__Definition__InputAssignment_1");
					put(grammarAccess.getDefinitionAccess().getCommandsAssignment_3(), "rule__Definition__CommandsAssignment_3");
					put(grammarAccess.getDefinitionAccess().getOutputAssignment_6(), "rule__Definition__OutputAssignment_6");
					put(grammarAccess.getInputAccess().getVarsAssignment_0(), "rule__Input__VarsAssignment_0");
					put(grammarAccess.getInputAccess().getVarsAssignment_1_1(), "rule__Input__VarsAssignment_1_1");
					put(grammarAccess.getOutputAccess().getVarsAssignment_0(), "rule__Output__VarsAssignment_0");
					put(grammarAccess.getOutputAccess().getVarsAssignment_1_1(), "rule__Output__VarsAssignment_1_1");
					put(grammarAccess.getCommandsAccess().getCommandsAssignment_0(), "rule__Commands__CommandsAssignment_0");
					put(grammarAccess.getCommandsAccess().getCommandsAssignment_1_1(), "rule__Commands__CommandsAssignment_1_1");
					put(grammarAccess.getCommandAccess().getCmdAssignment(), "rule__Command__CmdAssignment");
					put(grammarAccess.getIfAccess().getExprAssignment_1(), "rule__If__ExprAssignment_1");
					put(grammarAccess.getIfAccess().getCommands1Assignment_3(), "rule__If__Commands1Assignment_3");
					put(grammarAccess.getIfAccess().getCommands2Assignment_4_1(), "rule__If__Commands2Assignment_4_1");
					put(grammarAccess.getNopAccess().getNopAssignment(), "rule__Nop__NopAssignment");
					put(grammarAccess.getAffectAccess().getVarsAssignment_0(), "rule__Affect__VarsAssignment_0");
					put(grammarAccess.getAffectAccess().getVarsAssignment_1_1(), "rule__Affect__VarsAssignment_1_1");
					put(grammarAccess.getAffectAccess().getExprsAssignment_3(), "rule__Affect__ExprsAssignment_3");
					put(grammarAccess.getAffectAccess().getExprsAssignment_4_1(), "rule__Affect__ExprsAssignment_4_1");
					put(grammarAccess.getForAccess().getExprAssignment_1(), "rule__For__ExprAssignment_1");
					put(grammarAccess.getForAccess().getCmdsAssignment_3(), "rule__For__CmdsAssignment_3");
					put(grammarAccess.getForeachAccess().getExprAssignment_1(), "rule__Foreach__ExprAssignment_1");
					put(grammarAccess.getForeachAccess().getExpr2Assignment_3(), "rule__Foreach__Expr2Assignment_3");
					put(grammarAccess.getForeachAccess().getCmdsAssignment_5(), "rule__Foreach__CmdsAssignment_5");
					put(grammarAccess.getWhileAccess().getExprAssignment_1(), "rule__While__ExprAssignment_1");
					put(grammarAccess.getWhileAccess().getCmdsAssignment_3(), "rule__While__CmdsAssignment_3");
					put(grammarAccess.getExprAccess().getExprAssignment_0(), "rule__Expr__ExprAssignment_0");
					put(grammarAccess.getExprAccess().getExprAssignment_1(), "rule__Expr__ExprAssignment_1");
					put(grammarAccess.getExprAccess().getExprAssignment_2(), "rule__Expr__ExprAssignment_2");
					put(grammarAccess.getExprAccess().getExprAssignment_3(), "rule__Expr__ExprAssignment_3");
					put(grammarAccess.getExprAccess().getExprAssignment_4(), "rule__Expr__ExprAssignment_4");
					put(grammarAccess.getExprAccess().getExprAssignment_5(), "rule__Expr__ExprAssignment_5");
					put(grammarAccess.getExprAccess().getExprAssignment_6(), "rule__Expr__ExprAssignment_6");
					put(grammarAccess.getExprAccess().getExprAssignment_7(), "rule__Expr__ExprAssignment_7");
					put(grammarAccess.getExprAccess().getExprAssignment_8(), "rule__Expr__ExprAssignment_8");
					put(grammarAccess.getExprAccess().getExprEqAssignment_9(), "rule__Expr__ExprEqAssignment_9");
					put(grammarAccess.getExprAccess().getExprAssignment_10_1(), "rule__Expr__ExprAssignment_10_1");
					put(grammarAccess.getExprSimpleAccess().getStrAssignment_0(), "rule__ExprSimple__StrAssignment_0");
					put(grammarAccess.getExprSimpleAccess().getVarSimpleAssignment_1(), "rule__ExprSimple__VarSimpleAssignment_1");
					put(grammarAccess.getExprSimpleAccess().getSymAssignment_2(), "rule__ExprSimple__SymAssignment_2");
					put(grammarAccess.getExprSimpleAccess().getNameFunctionAssignment_3_1(), "rule__ExprSimple__NameFunctionAssignment_3_1");
					put(grammarAccess.getExprSimpleAccess().getVarsAssignment_3_2(), "rule__ExprSimple__VarsAssignment_3_2");
					put(grammarAccess.getExprAndAccess().getArg1Assignment_0(), "rule__ExprAnd__Arg1Assignment_0");
					put(grammarAccess.getExprAndAccess().getArg2Assignment_2(), "rule__ExprAnd__Arg2Assignment_2");
					put(grammarAccess.getExprOrAccess().getArg1Assignment_0(), "rule__ExprOr__Arg1Assignment_0");
					put(grammarAccess.getExprOrAccess().getArg2Assignment_2(), "rule__ExprOr__Arg2Assignment_2");
					put(grammarAccess.getExprConsAccess().getArg1Assignment_2(), "rule__ExprCons__Arg1Assignment_2");
					put(grammarAccess.getExprConsAccess().getArg2Assignment_3(), "rule__ExprCons__Arg2Assignment_3");
					put(grammarAccess.getExprListAccess().getArgAssignment_2(), "rule__ExprList__ArgAssignment_2");
					put(grammarAccess.getExprHdAccess().getArgAssignment_2(), "rule__ExprHd__ArgAssignment_2");
					put(grammarAccess.getExprTlAccess().getArgAssignment_2(), "rule__ExprTl__ArgAssignment_2");
					put(grammarAccess.getExprSymAccess().getArg1Assignment_1(), "rule__ExprSym__Arg1Assignment_1");
					put(grammarAccess.getExprSymAccess().getArg2Assignment_2(), "rule__ExprSym__Arg2Assignment_2");
					put(grammarAccess.getExprNotAccess().getArg1Assignment_1(), "rule__ExprNot__Arg1Assignment_1");
					put(grammarAccess.getExprEqAccess().getArg1Assignment_0(), "rule__ExprEq__Arg1Assignment_0");
					put(grammarAccess.getExprEqAccess().getArg2Assignment_2(), "rule__ExprEq__Arg2Assignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WhdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WhdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
