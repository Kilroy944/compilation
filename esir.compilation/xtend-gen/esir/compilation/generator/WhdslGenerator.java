/**
 * generated by Xtext 2.13.0
 */
package esir.compilation.generator;

import com.google.common.collect.Iterables;
import esir.compilation.whdsl.Affect;
import esir.compilation.whdsl.Call;
import esir.compilation.whdsl.Command;
import esir.compilation.whdsl.Commands;
import esir.compilation.whdsl.Cons;
import esir.compilation.whdsl.EnclosedExpr;
import esir.compilation.whdsl.Expr;
import esir.compilation.whdsl.ExprAnd;
import esir.compilation.whdsl.ExprEq;
import esir.compilation.whdsl.ExprNot;
import esir.compilation.whdsl.ExprOr;
import esir.compilation.whdsl.Exprs;
import esir.compilation.whdsl.For;
import esir.compilation.whdsl.ForEach;
import esir.compilation.whdsl.Function;
import esir.compilation.whdsl.Hd;
import esir.compilation.whdsl.If;
import esir.compilation.whdsl.LExpr;
import esir.compilation.whdsl.List;
import esir.compilation.whdsl.Nill;
import esir.compilation.whdsl.Nop;
import esir.compilation.whdsl.Program;
import esir.compilation.whdsl.Symbol;
import esir.compilation.whdsl.Tl;
import esir.compilation.whdsl.Variable;
import esir.compilation.whdsl.Vars;
import esir.compilation.whdsl.While;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhdslGenerator extends AbstractGenerator {
  private String indent_value = "   ";
  
  private String indent_if = "   ";
  
  private String indent_for = "   ";
  
  private String indent_while = "   ";
  
  private String indent_foreach = "  ";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
    for (final Program e : _filter) {
      fsa.generateFile("sortie.whdsl", this.compile(e));
    }
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String sortie, final String indent_value, final String indent_if, final String indent_for, final String indent_foreach, final String indent_while) {
    this.indent_value = indent_value;
    this.indent_if = indent_if;
    this.indent_for = indent_for;
    this.indent_foreach = indent_foreach;
    this.indent_while = indent_while;
    Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
    for (final Program e : _filter) {
      fsa.generateFile(sortie, this.compile(e));
    }
  }
  
  public CharSequence compile(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Function> _functions = p.getFunctions();
      boolean _hasElements = false;
      for(final Function f : _functions) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n", "");
        }
        CharSequence _compile = this.compile(f, this.indent_value);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    _builder.append("read ");
    CharSequence _compile = this.compile(f.getDefinition().getInput().getVars());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    {
      EList<Command> _list = f.getDefinition().getCommands().getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append(indent);
        CharSequence _compile_1 = this.compile(cmd, indent);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    CharSequence _compile_2 = this.compile(f.getDefinition().getOutput().getVars());
    _builder.append(_compile_2);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Command c, final String indent) {
    CharSequence _xifexpression = null;
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof Nop)) {
      EObject _cmd_1 = c.getCmd();
      _xifexpression = this.compile(((Nop) _cmd_1));
    } else {
      CharSequence _xifexpression_1 = null;
      EObject _cmd_2 = c.getCmd();
      if ((_cmd_2 instanceof Affect)) {
        EObject _cmd_3 = c.getCmd();
        _xifexpression_1 = this.compile(((Affect) _cmd_3));
      } else {
        CharSequence _xifexpression_2 = null;
        EObject _cmd_4 = c.getCmd();
        if ((_cmd_4 instanceof If)) {
          EObject _cmd_5 = c.getCmd();
          _xifexpression_2 = this.compile(((If) _cmd_5), indent);
        } else {
          CharSequence _xifexpression_3 = null;
          EObject _cmd_6 = c.getCmd();
          if ((_cmd_6 instanceof For)) {
            EObject _cmd_7 = c.getCmd();
            _xifexpression_3 = this.compile(((For) _cmd_7), indent);
          } else {
            CharSequence _xifexpression_4 = null;
            EObject _cmd_8 = c.getCmd();
            if ((_cmd_8 instanceof ForEach)) {
              EObject _cmd_9 = c.getCmd();
              _xifexpression_4 = this.compile(((ForEach) _cmd_9), indent);
            } else {
              CharSequence _xifexpression_5 = null;
              EObject _cmd_10 = c.getCmd();
              if ((_cmd_10 instanceof While)) {
                EObject _cmd_11 = c.getCmd();
                _xifexpression_5 = this.compile(((While) _cmd_11), indent);
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final Nop n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("nop");
    return _builder;
  }
  
  public CharSequence compile(final Vars vars) {
    StringConcatenation _builder = new StringConcatenation();
    String _join = IterableExtensions.join(vars.getList(), ", ");
    _builder.append(_join);
    return _builder;
  }
  
  public CharSequence compile(final Exprs exprs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expr> _list = exprs.getList();
      boolean _hasElements = false;
      for(final Expr exp : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        CharSequence _compile = this.compile(exp);
        _builder.append(_compile);
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final LExpr lexprs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expr> _list = lexprs.getList();
      boolean _hasElements = false;
      for(final Expr exp : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" ", "");
        }
        Object _compile = this.compile(exp);
        _builder.append(_compile);
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Expr e) {
    return this.compileExpr(e);
  }
  
  protected CharSequence _compileExpr(final Variable v) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = v.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _compileExpr(final Symbol s) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = s.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _compileExpr(final Nill n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("nil");
    return _builder;
  }
  
  protected CharSequence _compileExpr(final ExprAnd e) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compile = this.compile(e.getLeft());
    _builder.append(_compile);
    _builder.append(" and ");
    Object _compile_1 = this.compile(e.getRight());
    _builder.append(_compile_1);
    return _builder;
  }
  
  protected CharSequence _compileExpr(final ExprOr e) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compile = this.compile(e.getLeft());
    _builder.append(_compile);
    _builder.append(" or ");
    Object _compile_1 = this.compile(e.getRight());
    _builder.append(_compile_1);
    return _builder;
  }
  
  protected CharSequence _compileExpr(final ExprEq e) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compile = this.compile(e.getLeft());
    _builder.append(_compile);
    _builder.append(" =? ");
    Object _compile_1 = this.compile(e.getRight());
    _builder.append(_compile_1);
    return _builder;
  }
  
  protected CharSequence _compileExpr(final ExprNot e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("not ");
    Object _compile = this.compile(e.getExpr());
    _builder.append(_compile);
    return _builder;
  }
  
  protected CharSequence _compileExpr(final Cons c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(cons ");
    CharSequence _compile = this.compile(c.getExprs());
    _builder.append(_compile);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileExpr(final List l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(list ");
    CharSequence _compile = this.compile(l.getExprs());
    _builder.append(_compile);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileExpr(final Hd hd) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(hd ");
    Object _compile = this.compile(hd.getExpr());
    _builder.append(_compile);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileExpr(final Tl tl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(tl ");
    Object _compile = this.compile(tl.getExpr());
    _builder.append(_compile);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileExpr(final Call c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append(" ");
    CharSequence _compile = this.compile(c.getParams());
    _builder.append(_compile);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileExpr(final EnclosedExpr ie) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    Object _compile = this.compile(ie.getExpr());
    _builder.append(_compile);
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence compile(final Affect a) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(a.getVars());
    _builder.append(_compile);
    _builder.append(" := ");
    CharSequence _compile_1 = this.compile(a.getExprs());
    _builder.append(_compile_1);
    return _builder;
  }
  
  public CharSequence compile(final If i, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if ");
    CharSequence _compile = this.compile(i.getCondition());
    _builder.append(_compile);
    _builder.append(" then");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _list = i.getThenCommands().getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_if));
        Object _compile_1 = this.compile(cmd, (indent + this.indent_if));
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Commands _elseCommands = i.getElseCommands();
      boolean _tripleNotEquals = (_elseCommands != null);
      if (_tripleNotEquals) {
        _builder.append(indent);
        _builder.append("else");
        _builder.newLineIfNotEmpty();
        {
          EList<Command> _list_1 = i.getElseCommands().getList();
          boolean _hasElements_1 = false;
          for(final Command cmd_1 : _list_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(";", "");
            }
            _builder.append((indent + this.indent_if));
            Object _compile_2 = this.compile(cmd_1, (indent + this.indent_if));
            _builder.append(_compile_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(indent);
    _builder.append("fi");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final For f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for ");
    CharSequence _compile = this.compile(f.getCondition());
    _builder.append(_compile);
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _list = f.getCommands().getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_for));
        Object _compile_1 = this.compile(cmd, (indent + this.indent_for));
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent);
    _builder.append("od");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ForEach f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("foreach ");
    CharSequence _compile = this.compile(f.getElem());
    _builder.append(_compile);
    _builder.append(" in ");
    CharSequence _compile_1 = this.compile(f.getEnsemb());
    _builder.append(_compile_1);
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _list = f.getCommands().getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_foreach));
        Object _compile_2 = this.compile(cmd, (indent + this.indent_foreach));
        _builder.append(_compile_2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent);
    _builder.append("od");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final While w, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while ");
    CharSequence _compile = this.compile(w.getCondition());
    _builder.append(_compile);
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _list = w.getCommands().getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_while));
        Object _compile_1 = this.compile(cmd, (indent + this.indent_while));
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent);
    _builder.append("od");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileExpr(final Expr c) {
    if (c instanceof Call) {
      return _compileExpr((Call)c);
    } else if (c instanceof Cons) {
      return _compileExpr((Cons)c);
    } else if (c instanceof EnclosedExpr) {
      return _compileExpr((EnclosedExpr)c);
    } else if (c instanceof ExprAnd) {
      return _compileExpr((ExprAnd)c);
    } else if (c instanceof ExprEq) {
      return _compileExpr((ExprEq)c);
    } else if (c instanceof ExprNot) {
      return _compileExpr((ExprNot)c);
    } else if (c instanceof ExprOr) {
      return _compileExpr((ExprOr)c);
    } else if (c instanceof Hd) {
      return _compileExpr((Hd)c);
    } else if (c instanceof List) {
      return _compileExpr((List)c);
    } else if (c instanceof Nill) {
      return _compileExpr((Nill)c);
    } else if (c instanceof Symbol) {
      return _compileExpr((Symbol)c);
    } else if (c instanceof Tl) {
      return _compileExpr((Tl)c);
    } else if (c instanceof Variable) {
      return _compileExpr((Variable)c);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(c).toString());
    }
  }
}
