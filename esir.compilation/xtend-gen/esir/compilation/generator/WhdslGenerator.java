/**
 * generated by Xtext 2.13.0
 */
package esir.compilation.generator;

import com.google.common.collect.Iterables;
import esir.compilation.whdsl.Affect;
import esir.compilation.whdsl.Command;
import esir.compilation.whdsl.Commands;
import esir.compilation.whdsl.Definition;
import esir.compilation.whdsl.Expr;
import esir.compilation.whdsl.For;
import esir.compilation.whdsl.Function;
import esir.compilation.whdsl.If;
import esir.compilation.whdsl.Input;
import esir.compilation.whdsl.Nop;
import esir.compilation.whdsl.Output;
import esir.compilation.whdsl.Program;
import esir.compilation.whdsl.While;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhdslGenerator extends AbstractGenerator {
  private String indent_value = "   ";
  
  private String indent_if = "   ";
  
  private String indent_for = "   ";
  
  private String indent_while = "   ";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile("sortie.whdsl", _compile);
    }
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String sortie, final String indent_value, final String indent_if, final String indent_for, final String indent_while) {
    this.indent_value = indent_value;
    this.indent_if = indent_if;
    this.indent_for = indent_for;
    this.indent_while = indent_while;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile(sortie, _compile);
    }
  }
  
  public CharSequence compile(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Function> _functions = p.getFunctions();
      boolean _hasElements = false;
      for(final Function f : _functions) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n", "");
        }
        CharSequence _compile = this.compile(f, this.indent_value);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = f.getName();
    _builder.append(_name, "");
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    _builder.append("read ");
    {
      Definition _definition = f.getDefinition();
      Input _input = _definition.getInput();
      EList<String> _vars = _input.getVars();
      boolean _hasElements = false;
      for(final String param : _vars) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        _builder.append(param, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append(indent, "");
    Definition _definition_1 = f.getDefinition();
    Commands _commands = _definition_1.getCommands();
    _builder.append(_commands, "");
    {
      Definition _definition_2 = f.getDefinition();
      Commands _commands_1 = _definition_2.getCommands();
      EList<Command> _commands_2 = _commands_1.getCommands();
      for(final Command param_1 : _commands_2) {
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append(indent, "");
        CharSequence _compile = this.compile(param_1, indent);
        _builder.append(_compile, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    {
      Definition _definition_3 = f.getDefinition();
      Output _output = _definition_3.getOutput();
      EList<String> _vars_1 = _output.getVars();
      boolean _hasElements_1 = false;
      for(final String param_2 : _vars_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        _builder.append(param_2, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Command c, final String indent) {
    CharSequence _xifexpression = null;
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof Nop)) {
      EObject _cmd_1 = c.getCmd();
      _xifexpression = this.compile(((Nop) _cmd_1));
    } else {
      CharSequence _xifexpression_1 = null;
      EObject _cmd_2 = c.getCmd();
      if ((_cmd_2 instanceof Affect)) {
        EObject _cmd_3 = c.getCmd();
        _xifexpression_1 = this.compile(((Affect) _cmd_3));
      } else {
        CharSequence _xifexpression_2 = null;
        EObject _cmd_4 = c.getCmd();
        if ((_cmd_4 instanceof If)) {
          EObject _cmd_5 = c.getCmd();
          _xifexpression_2 = this.compile(((If) _cmd_5), indent);
        } else {
          CharSequence _xifexpression_3 = null;
          EObject _cmd_6 = c.getCmd();
          if ((_cmd_6 instanceof For)) {
            EObject _cmd_7 = c.getCmd();
            _xifexpression_3 = this.compile(((For) _cmd_7), indent);
          } else {
            CharSequence _xifexpression_4 = null;
            EObject _cmd_8 = c.getCmd();
            if ((_cmd_8 instanceof While)) {
              EObject _cmd_9 = c.getCmd();
              _xifexpression_4 = this.compile(((While) _cmd_9), indent);
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final Nop n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("nop");
    return _builder;
  }
  
  public CharSequence compile(final Affect a) {
    StringConcatenation _builder = new StringConcatenation();
    EList<String> _vars = a.getVars();
    _builder.append(_vars, "");
    _builder.append(":=");
    EList<Expr> _exprs = a.getExprs();
    _builder.append(_exprs, "");
    return _builder;
  }
  
  public CharSequence compile(final If i, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if ");
    Expr _expr = i.getExpr();
    _builder.append(_expr, "");
    _builder.append(" then ");
    _builder.newLineIfNotEmpty();
    _builder.append((indent + this.indent_if), "");
    {
      Commands _commands1 = i.getCommands1();
      EList<Command> _commands = _commands1.getCommands();
      for(final Command param : _commands) {
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append((indent + this.indent_if), "");
        Object _compile = this.compile(param, (indent + this.indent_if));
        _builder.append(_compile, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(indent, "");
    _builder.append("else");
    _builder.newLineIfNotEmpty();
    _builder.append((indent + this.indent_if), "");
    {
      Commands _commands2 = i.getCommands2();
      EList<Command> _commands_1 = _commands2.getCommands();
      for(final Command param_1 : _commands_1) {
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append((indent + this.indent_if), "");
        Object _compile_1 = this.compile(param_1, (indent + this.indent_if));
        _builder.append(_compile_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(indent, "");
    _builder.append("fi");
    return _builder;
  }
  
  public CharSequence compile(final For f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for ");
    Expr _expr = f.getExpr();
    _builder.append(_expr, "");
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    _builder.append((indent + this.indent_for), "");
    Commands _cmds = f.getCmds();
    EList<Command> _commands = _cmds.getCommands();
    _builder.append(_commands, "");
    {
      Commands _cmds_1 = f.getCmds();
      EList<Command> _commands_1 = _cmds_1.getCommands();
      for(final Command param : _commands_1) {
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append((indent + this.indent_for), "");
        Object _compile = this.compile(param, (indent + this.indent_for));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("od");
    return _builder;
  }
  
  public CharSequence compile(final While w, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while ");
    Expr _expr = w.getExpr();
    _builder.append(_expr, "");
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    _builder.append((indent + this.indent_while), "");
    Commands _cmds = w.getCmds();
    EList<Command> _commands = _cmds.getCommands();
    _builder.append(_commands, "");
    {
      Commands _cmds_1 = w.getCmds();
      EList<Command> _commands_1 = _cmds_1.getCommands();
      for(final Command param : _commands_1) {
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append((indent + this.indent_while), "");
        Object _compile = this.compile(param, (indent + this.indent_while));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("od");
    return _builder;
  }
}
