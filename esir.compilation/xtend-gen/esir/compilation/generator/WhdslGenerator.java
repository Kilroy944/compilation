/**
 * generated by Xtext 2.13.0
 */
package esir.compilation.generator;

import com.google.common.collect.Iterables;
import esir.compilation.whdsl.Affect;
import esir.compilation.whdsl.Command;
import esir.compilation.whdsl.Commands;
import esir.compilation.whdsl.Definition;
import esir.compilation.whdsl.Expr;
import esir.compilation.whdsl.ExprSimple;
import esir.compilation.whdsl.Exprs;
import esir.compilation.whdsl.For;
import esir.compilation.whdsl.ForEach;
import esir.compilation.whdsl.Function;
import esir.compilation.whdsl.If;
import esir.compilation.whdsl.Input;
import esir.compilation.whdsl.LExpr;
import esir.compilation.whdsl.Nop;
import esir.compilation.whdsl.Output;
import esir.compilation.whdsl.Program;
import esir.compilation.whdsl.Vars;
import esir.compilation.whdsl.While;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhdslGenerator extends AbstractGenerator {
  private String indent_value = "   ";
  
  private String indent_if = "   ";
  
  private String indent_for = "   ";
  
  private String indent_while = "   ";
  
  private String indent_foreach = "  ";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile("sortie.whdsl", _compile);
    }
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String sortie, final String indent_value, final String indent_if, final String indent_for, final String indent_foreach, final String indent_while) {
    this.indent_value = indent_value;
    this.indent_if = indent_if;
    this.indent_for = indent_for;
    this.indent_foreach = indent_foreach;
    this.indent_while = indent_while;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile(sortie, _compile);
    }
  }
  
  public CharSequence compile(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Function> _functions = p.getFunctions();
      boolean _hasElements = false;
      for(final Function f : _functions) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n", "");
        }
        CharSequence _compile = this.compile(f, this.indent_value);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = f.getName();
    _builder.append(_name, "");
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    _builder.append("read ");
    Definition _definition = f.getDefinition();
    Input _input = _definition.getInput();
    Vars _vars = _input.getVars();
    CharSequence _compile = this.compile(_vars);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    {
      Definition _definition_1 = f.getDefinition();
      Commands _commands = _definition_1.getCommands();
      EList<Command> _list = _commands.getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append(indent, "");
        CharSequence _compile_1 = this.compile(cmd, indent);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    Definition _definition_2 = f.getDefinition();
    Output _output = _definition_2.getOutput();
    Vars _vars_1 = _output.getVars();
    CharSequence _compile_2 = this.compile(_vars_1);
    _builder.append(_compile_2, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Command c, final String indent) {
    CharSequence _xifexpression = null;
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof Nop)) {
      EObject _cmd_1 = c.getCmd();
      _xifexpression = this.compile(((Nop) _cmd_1));
    } else {
      CharSequence _xifexpression_1 = null;
      EObject _cmd_2 = c.getCmd();
      if ((_cmd_2 instanceof Affect)) {
        EObject _cmd_3 = c.getCmd();
        _xifexpression_1 = this.compile(((Affect) _cmd_3));
      } else {
        CharSequence _xifexpression_2 = null;
        EObject _cmd_4 = c.getCmd();
        if ((_cmd_4 instanceof If)) {
          EObject _cmd_5 = c.getCmd();
          _xifexpression_2 = this.compile(((If) _cmd_5), indent);
        } else {
          CharSequence _xifexpression_3 = null;
          EObject _cmd_6 = c.getCmd();
          if ((_cmd_6 instanceof For)) {
            EObject _cmd_7 = c.getCmd();
            _xifexpression_3 = this.compile(((For) _cmd_7), indent);
          } else {
            CharSequence _xifexpression_4 = null;
            EObject _cmd_8 = c.getCmd();
            if ((_cmd_8 instanceof ForEach)) {
              EObject _cmd_9 = c.getCmd();
              _xifexpression_4 = this.compile(((ForEach) _cmd_9), indent);
            } else {
              CharSequence _xifexpression_5 = null;
              EObject _cmd_10 = c.getCmd();
              if ((_cmd_10 instanceof While)) {
                EObject _cmd_11 = c.getCmd();
                _xifexpression_5 = this.compile(((While) _cmd_11), indent);
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final Nop n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("nop");
    return _builder;
  }
  
  public CharSequence compile(final Vars vars) {
    StringConcatenation _builder = new StringConcatenation();
    EList<String> _list = vars.getList();
    String _join = IterableExtensions.join(_list, ", ");
    _builder.append(_join, "");
    return _builder;
  }
  
  public CharSequence compile(final Exprs exprs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expr> _list = exprs.getList();
      boolean _hasElements = false;
      for(final Expr exp : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        CharSequence _compile = this.compile(exp);
        _builder.append(_compile, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final LExpr lexprs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expr> _list = lexprs.getList();
      boolean _hasElements = false;
      for(final Expr exp : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" ", "");
        }
        Object _compile = this.compile(exp);
        _builder.append(_compile, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Expr e) {
    ExprSimple _simple = e.getSimple();
    return this.compile(((ExprSimple) _simple));
  }
  
  public CharSequence compile(final ExprSimple e) {
    CharSequence _xifexpression = null;
    String _nil = e.getNil();
    boolean _tripleNotEquals = (_nil != null);
    if (_tripleNotEquals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("nil");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      String _var = e.getVar();
      boolean _tripleNotEquals_1 = (_var != null);
      if (_tripleNotEquals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        String _var_1 = e.getVar();
        _builder_1.append(_var_1, "");
        _xifexpression_1 = _builder_1;
      } else {
        CharSequence _xifexpression_2 = null;
        String _sym = e.getSym();
        boolean _tripleNotEquals_2 = (_sym != null);
        if (_tripleNotEquals_2) {
          StringConcatenation _builder_2 = new StringConcatenation();
          String _sym_1 = e.getSym();
          _builder_2.append(_sym_1, "");
          _xifexpression_2 = _builder_2;
        } else {
          CharSequence _xifexpression_3 = null;
          LExpr _cons = e.getCons();
          boolean _tripleNotEquals_3 = (_cons != null);
          if (_tripleNotEquals_3) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("(cons ");
            LExpr _cons_1 = e.getCons();
            CharSequence _compile = this.compile(_cons_1);
            _builder_3.append(_compile, "");
            _builder_3.append(")");
            _xifexpression_3 = _builder_3;
          } else {
            CharSequence _xifexpression_4 = null;
            LExpr _list = e.getList();
            boolean _tripleNotEquals_4 = (_list != null);
            if (_tripleNotEquals_4) {
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("(list ");
              LExpr _list_1 = e.getList();
              CharSequence _compile_1 = this.compile(_list_1);
              _builder_4.append(_compile_1, "");
              _builder_4.append(")");
              _xifexpression_4 = _builder_4;
            } else {
              CharSequence _xifexpression_5 = null;
              Expr _hd = e.getHd();
              boolean _tripleNotEquals_5 = (_hd != null);
              if (_tripleNotEquals_5) {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("(hd ");
                Expr _hd_1 = e.getHd();
                Object _compile_2 = this.compile(_hd_1);
                _builder_5.append(_compile_2, "");
                _builder_5.append(")");
                _xifexpression_5 = _builder_5;
              } else {
                CharSequence _xifexpression_6 = null;
                Expr _tl = e.getTl();
                boolean _tripleNotEquals_6 = (_tl != null);
                if (_tripleNotEquals_6) {
                  StringConcatenation _builder_6 = new StringConcatenation();
                  _builder_6.append("(tl ");
                  Expr _tl_1 = e.getTl();
                  Object _compile_3 = this.compile(_tl_1);
                  _builder_6.append(_compile_3, "");
                  _builder_6.append(")");
                  _xifexpression_6 = _builder_6;
                } else {
                  StringConcatenation _builder_7 = new StringConcatenation();
                  _builder_7.append("(");
                  String _funcName = e.getFuncName();
                  _builder_7.append(_funcName, "");
                  _builder_7.append(" ");
                  LExpr _funcParams = e.getFuncParams();
                  CharSequence _compile_4 = this.compile(_funcParams);
                  _builder_7.append(_compile_4, "");
                  _builder_7.append(")");
                  _xifexpression_6 = _builder_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final Affect a) {
    StringConcatenation _builder = new StringConcatenation();
    Vars _vars = a.getVars();
    CharSequence _compile = this.compile(_vars);
    _builder.append(_compile, "");
    _builder.append(" := ");
    Exprs _exprs = a.getExprs();
    CharSequence _compile_1 = this.compile(_exprs);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final If i, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if ");
    Expr _condition = i.getCondition();
    CharSequence _compile = this.compile(_condition);
    _builder.append(_compile, "");
    _builder.append(" then");
    _builder.newLineIfNotEmpty();
    {
      Commands _thenCommands = i.getThenCommands();
      EList<Command> _list = _thenCommands.getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_if), "");
        Object _compile_1 = this.compile(cmd, (indent + this.indent_if));
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("else");
    _builder.newLineIfNotEmpty();
    {
      Commands _elseCommands = i.getElseCommands();
      EList<Command> _list_1 = _elseCommands.getList();
      boolean _hasElements_1 = false;
      for(final Command cmd_1 : _list_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_if), "");
        Object _compile_2 = this.compile(cmd_1, (indent + this.indent_if));
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("fi");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final For f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for ");
    Expr _condition = f.getCondition();
    CharSequence _compile = this.compile(_condition);
    _builder.append(_compile, "");
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    {
      Commands _commands = f.getCommands();
      EList<Command> _list = _commands.getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_for), "");
        Object _compile_1 = this.compile(cmd, (indent + this.indent_for));
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("od");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ForEach f, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("foreach ");
    Expr _elem = f.getElem();
    CharSequence _compile = this.compile(_elem);
    _builder.append(_compile, "");
    _builder.append(" in ");
    Expr _ensemb = f.getEnsemb();
    CharSequence _compile_1 = this.compile(_ensemb);
    _builder.append(_compile_1, "");
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    {
      Commands _commands = f.getCommands();
      EList<Command> _list = _commands.getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_foreach), "");
        Object _compile_2 = this.compile(cmd, (indent + this.indent_foreach));
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("od");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final While w, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while ");
    Expr _condition = w.getCondition();
    CharSequence _compile = this.compile(_condition);
    _builder.append(_compile, "");
    _builder.append(" do");
    _builder.newLineIfNotEmpty();
    {
      Commands _commands = w.getCommands();
      EList<Command> _list = _commands.getList();
      boolean _hasElements = false;
      for(final Command cmd : _list) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(";", "");
        }
        _builder.append((indent + this.indent_while), "");
        Object _compile_1 = this.compile(cmd, (indent + this.indent_while));
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(indent, "");
    _builder.append("od");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
