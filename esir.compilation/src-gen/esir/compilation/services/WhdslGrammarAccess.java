/*
 * generated by Xtext 2.13.0
 */
package esir.compilation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Program:
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSYMBOLETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' name=SYMBOLE ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=SYMBOLE ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=SYMBOLE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SYMBOLE
		public RuleCall getNameSYMBOLETerminalRuleCall_1_0() { return cNameSYMBOLETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputInputParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandsParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputOutputParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		
		//Definition:
		//	input=Input '%'
		//	commands=Commands
		//	'%' output=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//input=Input '%' commands=Commands '%' output=Output
		public Group getGroup() { return cGroup; }
		
		//input=Input
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_0() { return cInputInputParserRuleCall_0_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_2_0() { return cCommandsCommandsParserRuleCall_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//output=Output
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_4_0() { return cOutputOutputParserRuleCall_4_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		///*Input Output */ Input:
		//	'read' variables+=VARIABLE (',' variables+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' variables+=VARIABLE (',' variables+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_1_0() { return cVariablesVARIABLETerminalRuleCall_1_0; }
		
		//(',' variables+=VARIABLE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_2_1_0() { return cVariablesVARIABLETerminalRuleCall_2_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//Output:
		//	'write' variables+=VARIABLE (',' variables+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'write' variables+=VARIABLE (',' variables+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//'write'
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_1_0() { return cVariablesVARIABLETerminalRuleCall_1_0; }
		
		//(',' variables+=VARIABLE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_2_1_0() { return cVariablesVARIABLETerminalRuleCall_2_1_0; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	var=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//var=VARIABLE
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarVARIABLETerminalRuleCall_0_0() { return cVarVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCommandParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		
		///*COMMAND */ Commands:
		//	command=Command (';' commands+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Command (';' commands+=Command)*
		public Group getGroup() { return cGroup; }
		
		//command=Command
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0_0() { return cCommandCommandParserRuleCall_0_0; }
		
		//(';' commands+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_1_0() { return cCommandsCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCmdNopParserRuleCall_0_0 = (RuleCall)cCmdAssignment_0.eContents().get(0);
		private final Assignment cCmdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCmdAffectParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		private final Assignment cCmdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCmdIfParserRuleCall_2_0 = (RuleCall)cCmdAssignment_2.eContents().get(0);
		private final Assignment cCmdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCmdForParserRuleCall_3_0 = (RuleCall)cCmdAssignment_3.eContents().get(0);
		private final Assignment cCmdAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCmdWhileParserRuleCall_4_0 = (RuleCall)cCmdAssignment_4.eContents().get(0);
		private final Assignment cCmdAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCmdForEachParserRuleCall_5_0 = (RuleCall)cCmdAssignment_5.eContents().get(0);
		
		//Command:
		//	cmd=Nop | cmd=Affect | cmd=If | cmd=For | cmd=While | cmd=ForEach;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd=Nop | cmd=Affect | cmd=If | cmd=For | cmd=While | cmd=ForEach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cmd=Nop
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//Nop
		public RuleCall getCmdNopParserRuleCall_0_0() { return cCmdNopParserRuleCall_0_0; }
		
		//cmd=Affect
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }
		
		//Affect
		public RuleCall getCmdAffectParserRuleCall_1_0() { return cCmdAffectParserRuleCall_1_0; }
		
		//cmd=If
		public Assignment getCmdAssignment_2() { return cCmdAssignment_2; }
		
		//If
		public RuleCall getCmdIfParserRuleCall_2_0() { return cCmdIfParserRuleCall_2_0; }
		
		//cmd=For
		public Assignment getCmdAssignment_3() { return cCmdAssignment_3; }
		
		//For
		public RuleCall getCmdForParserRuleCall_3_0() { return cCmdForParserRuleCall_3_0; }
		
		//cmd=While
		public Assignment getCmdAssignment_4() { return cCmdAssignment_4; }
		
		//While
		public RuleCall getCmdWhileParserRuleCall_4_0() { return cCmdWhileParserRuleCall_4_0; }
		
		//cmd=ForEach
		public Assignment getCmdAssignment_5() { return cCmdAssignment_5; }
		
		//ForEach
		public RuleCall getCmdForEachParserRuleCall_5_0() { return cCmdForEachParserRuleCall_5_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsThenCommandsParserRuleCall_3_0 = (RuleCall)cCmdsThenAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCmdsElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCmdsElseCommandsParserRuleCall_4_1_0 = (RuleCall)cCmdsElseAssignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If:
		//	'if' cond=Expr 'then' cmdsThen=Commands ('else' cmdsElse=Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' cond=Expr 'then' cmdsThen=Commands ('else' cmdsElse=Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//cmdsThen=Commands
		public Assignment getCmdsThenAssignment_3() { return cCmdsThenAssignment_3; }
		
		//Commands
		public RuleCall getCmdsThenCommandsParserRuleCall_3_0() { return cCmdsThenCommandsParserRuleCall_3_0; }
		
		//('else' cmdsElse=Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//cmdsElse=Commands
		public Assignment getCmdsElseAssignment_4_1() { return cCmdsElseAssignment_4_1; }
		
		//Commands
		public RuleCall getCmdsElseCommandsParserRuleCall_4_1_0() { return cCmdsElseCommandsParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class AffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Affect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsExprsParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		
		//Affect:
		//	vars=Vars ':=' exprs=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//vars=Vars ':=' exprs=Exprs
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exprs=Exprs
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//Exprs
		public RuleCall getExprsExprsParserRuleCall_2_0() { return cExprsExprsParserRuleCall_2_0; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsCommandsParserRuleCall_3_0 = (RuleCall)cCmdsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	'for' cond=Expr 'do' cmds=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' cond=Expr 'do' cmds=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//cmds=Commands
		public Assignment getCmdsAssignment_3() { return cCmdsAssignment_3; }
		
		//Commands
		public RuleCall getCmdsCommandsParserRuleCall_3_0() { return cCmdsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsCommandsParserRuleCall_3_0 = (RuleCall)cCmdsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//While:
		//	'while' cond=Expr 'do' cmds=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' cond=Expr 'do' cmds=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//cmds=Commands
		public Assignment getCmdsAssignment_3() { return cCmdsAssignment_3; }
		
		//Commands
		public RuleCall getCmdsCommandsParserRuleCall_3_0() { return cCmdsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Nop");
		private final Assignment cNopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNopNopKeyword_0 = (Keyword)cNopAssignment.eContents().get(0);
		
		//Nop:
		//	nop='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop'
		public Assignment getNopAssignment() { return cNopAssignment; }
		
		//'nop'
		public Keyword getNopNopKeyword_0() { return cNopNopKeyword_0; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemExprParserRuleCall_1_0 = (RuleCall)cElemAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnsembAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnsembExprParserRuleCall_3_0 = (RuleCall)cEnsembAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCmdsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCmdsCommandsParserRuleCall_5_0 = (RuleCall)cCmdsAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForEach:
		//	'foreach' elem=Expr 'in' ensemb=Expr 'do' cmds=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' elem=Expr 'in' ensemb=Expr 'do' cmds=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//elem=Expr
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }
		
		//Expr
		public RuleCall getElemExprParserRuleCall_1_0() { return cElemExprParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//ensemb=Expr
		public Assignment getEnsembAssignment_3() { return cEnsembAssignment_3; }
		
		//Expr
		public RuleCall getEnsembExprParserRuleCall_3_0() { return cEnsembExprParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//cmds=Commands
		public Assignment getCmdsAssignment_5() { return cCmdsAssignment_5; }
		
		//Commands
		public RuleCall getCmdsCommandsParserRuleCall_5_0() { return cCmdsCommandsParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_1_1_0 = (RuleCall)cExprsAssignment_1_1.eContents().get(0);
		
		///* Expression */ Exprs:
		//	expr=Expr (',' exprs+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expr (',' exprs+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//expr=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }
		
		//(',' exprs+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_1_1() { return cExprsAssignment_1_1; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_1_1_0() { return cExprsExprParserRuleCall_1_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Expr");
		private final Keyword cDigitOneKeyword = (Keyword)rule.eContents().get(1);
		
		//Expr:
		//	"1"
		//	//(expr = ExprSimple) | (expr = ExprAnd)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"1"
		public Keyword getDigitOneKeyword() { return cDigitOneKeyword; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final VarsElements pVars;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final IfElements pIf;
	private final AffectElements pAffect;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final NopElements pNop;
	private final ForEachElements pForEach;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pVars = new VarsElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pIf = new IfElements();
		this.pAffect = new AffectElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pNop = new NopElements();
		this.pForEach = new ForEachElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.VARIABLE");
		this.tSYMBOLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.SYMBOLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("esir.compilation.Whdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	functions+=Function*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' name=SYMBOLE ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	input=Input '%'
	//	commands=Commands
	//	'%' output=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	///*Input Output */ Input:
	//	'read' variables+=VARIABLE (',' variables+=VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	'write' variables+=VARIABLE (',' variables+=VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Vars:
	//	var=VARIABLE (',' vars+=VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	///*COMMAND */ Commands:
	//	command=Command (';' commands+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	cmd=Nop | cmd=Affect | cmd=If | cmd=For | cmd=While | cmd=ForEach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//If:
	//	'if' cond=Expr 'then' cmdsThen=Commands ('else' cmdsElse=Commands)? 'fi';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Affect:
	//	vars=Vars ':=' exprs=Exprs;
	public AffectElements getAffectAccess() {
		return pAffect;
	}
	
	public ParserRule getAffectRule() {
		return getAffectAccess().getRule();
	}
	
	//For:
	//	'for' cond=Expr 'do' cmds=Commands 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//While:
	//	'while' cond=Expr 'do' cmds=Commands 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Nop:
	//	nop='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//ForEach:
	//	'foreach' elem=Expr 'in' ensemb=Expr 'do' cmds=Commands 'od';
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	///* Expression */ Exprs:
	//	expr=Expr (',' exprs+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	"1"
	//	//(expr = ExprSimple) | (expr = ExprAnd)
	//;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	'A'..'Z'*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOLE:
	//	'a'..'z'*;
	public TerminalRule getSYMBOLERule() {
		return tSYMBOLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
