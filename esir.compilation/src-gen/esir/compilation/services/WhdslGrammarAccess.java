/*
 * generated by Xtext 2.13.0
 */
package esir.compilation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Program:
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSYMBOLETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' name=SYMBOLE ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=SYMBOLE ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=SYMBOLE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SYMBOLE
		public RuleCall getNameSYMBOLETerminalRuleCall_1_0() { return cNameSYMBOLETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputInputParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandsParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputOutputParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		
		//Definition:
		//	input=Input '%'
		//	commands=Commands
		//	'%' output=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//input=Input '%' commands=Commands '%' output=Output
		public Group getGroup() { return cGroup; }
		
		//input=Input
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_0() { return cInputInputParserRuleCall_0_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_2_0() { return cCommandsCommandsParserRuleCall_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//output=Output
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_4_0() { return cOutputOutputParserRuleCall_4_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarsParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		///*Input Output */ Input:
		//	'read' vars=Vars;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' vars=Vars
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//vars=Vars
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_1_0() { return cVarsVarsParserRuleCall_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarsParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//Output:
		//	'write' vars=Vars;
		@Override public ParserRule getRule() { return rule; }
		
		//'write' vars=Vars
		public Group getGroup() { return cGroup; }
		
		//'write'
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }
		
		//vars=Vars
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_1_0() { return cVarsVarsParserRuleCall_1_0; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListVARIABLETerminalRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	list+=VARIABLE (',' list+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//list+=VARIABLE (',' list+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//list+=VARIABLE
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//VARIABLE
		public RuleCall getListVARIABLETerminalRuleCall_0_0() { return cListVARIABLETerminalRuleCall_0_0; }
		
		//(',' list+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//list+=VARIABLE
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getListVARIABLETerminalRuleCall_1_1_0() { return cListVARIABLETerminalRuleCall_1_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListCommandParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListCommandParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		///*COMMAND */ Commands:
		//	list+=Command (';' list+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//list+=Command (';' list+=Command)*
		public Group getGroup() { return cGroup; }
		
		//list+=Command
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//Command
		public RuleCall getListCommandParserRuleCall_0_0() { return cListCommandParserRuleCall_0_0; }
		
		//(';' list+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//list+=Command
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }
		
		//Command
		public RuleCall getListCommandParserRuleCall_1_1_0() { return cListCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCmdNopParserRuleCall_0_0 = (RuleCall)cCmdAssignment_0.eContents().get(0);
		private final Assignment cCmdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCmdAffectParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		private final Assignment cCmdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCmdIfParserRuleCall_2_0 = (RuleCall)cCmdAssignment_2.eContents().get(0);
		private final Assignment cCmdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCmdForParserRuleCall_3_0 = (RuleCall)cCmdAssignment_3.eContents().get(0);
		private final Assignment cCmdAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCmdWhileParserRuleCall_4_0 = (RuleCall)cCmdAssignment_4.eContents().get(0);
		private final Assignment cCmdAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCmdForEachParserRuleCall_5_0 = (RuleCall)cCmdAssignment_5.eContents().get(0);
		
		//Command:
		//	cmd=Nop | cmd=Affect | cmd=If | cmd=For | cmd=While | cmd=ForEach;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd=Nop | cmd=Affect | cmd=If | cmd=For | cmd=While | cmd=ForEach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cmd=Nop
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//Nop
		public RuleCall getCmdNopParserRuleCall_0_0() { return cCmdNopParserRuleCall_0_0; }
		
		//cmd=Affect
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }
		
		//Affect
		public RuleCall getCmdAffectParserRuleCall_1_0() { return cCmdAffectParserRuleCall_1_0; }
		
		//cmd=If
		public Assignment getCmdAssignment_2() { return cCmdAssignment_2; }
		
		//If
		public RuleCall getCmdIfParserRuleCall_2_0() { return cCmdIfParserRuleCall_2_0; }
		
		//cmd=For
		public Assignment getCmdAssignment_3() { return cCmdAssignment_3; }
		
		//For
		public RuleCall getCmdForParserRuleCall_3_0() { return cCmdForParserRuleCall_3_0; }
		
		//cmd=While
		public Assignment getCmdAssignment_4() { return cCmdAssignment_4; }
		
		//While
		public RuleCall getCmdWhileParserRuleCall_4_0() { return cCmdWhileParserRuleCall_4_0; }
		
		//cmd=ForEach
		public Assignment getCmdAssignment_5() { return cCmdAssignment_5; }
		
		//ForEach
		public RuleCall getCmdForEachParserRuleCall_5_0() { return cCmdForEachParserRuleCall_5_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExprParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenCommandsCommandsParserRuleCall_3_0 = (RuleCall)cThenCommandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseCommandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseCommandsCommandsParserRuleCall_4_1_0 = (RuleCall)cElseCommandsAssignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If:
		//	'if' condition=Expr 'then' thenCommands=Commands ('else' elseCommands=Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expr 'then' thenCommands=Commands ('else' elseCommands=Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expr
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_1_0() { return cConditionExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenCommands=Commands
		public Assignment getThenCommandsAssignment_3() { return cThenCommandsAssignment_3; }
		
		//Commands
		public RuleCall getThenCommandsCommandsParserRuleCall_3_0() { return cThenCommandsCommandsParserRuleCall_3_0; }
		
		//('else' elseCommands=Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseCommands=Commands
		public Assignment getElseCommandsAssignment_4_1() { return cElseCommandsAssignment_4_1; }
		
		//Commands
		public RuleCall getElseCommandsCommandsParserRuleCall_4_1_0() { return cElseCommandsCommandsParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class AffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Affect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsExprsParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		
		//Affect:
		//	vars=Vars ':=' exprs=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//vars=Vars ':=' exprs=Exprs
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exprs=Exprs
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//Exprs
		public RuleCall getExprsExprsParserRuleCall_2_0() { return cExprsExprsParserRuleCall_2_0; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExprParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	'for' condition=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' condition=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//condition=Expr
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_1_0() { return cConditionExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExprParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//While:
		//	'while' condition=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=Expr
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_1_0() { return cConditionExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Nop");
		private final Assignment cNopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNopNopKeyword_0 = (Keyword)cNopAssignment.eContents().get(0);
		
		//Nop:
		//	nop='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop'
		public Assignment getNopAssignment() { return cNopAssignment; }
		
		//'nop'
		public Keyword getNopNopKeyword_0() { return cNopNopKeyword_0; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemExprParserRuleCall_1_0 = (RuleCall)cElemAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnsembAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnsembExprParserRuleCall_3_0 = (RuleCall)cEnsembAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandsParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForEach:
		//	'foreach' elem=Expr 'in' ensemb=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' elem=Expr 'in' ensemb=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//elem=Expr
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }
		
		//Expr
		public RuleCall getElemExprParserRuleCall_1_0() { return cElemExprParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//ensemb=Expr
		public Assignment getEnsembAssignment_3() { return cEnsembAssignment_3; }
		
		//Expr
		public RuleCall getEnsembExprParserRuleCall_3_0() { return cEnsembExprParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_5_0() { return cCommandsCommandsParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListExprParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListExprParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		///* EXPRESSIONS */ Exprs:
		//	list+=Expr (',' list+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//list+=Expr (',' list+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//list+=Expr
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//Expr
		public RuleCall getListExprParserRuleCall_0_0() { return cListExprParserRuleCall_0_0; }
		
		//(',' list+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//list+=Expr
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }
		
		//Expr
		public RuleCall getListExprParserRuleCall_1_1_0() { return cListExprParserRuleCall_1_1_0; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListExprParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListExprParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//// expressions séparées par des blancs, ex: (cons nil (cons nil Y))
		//LExpr:
		//	list+=Expr list+=Expr*;
		@Override public ParserRule getRule() { return rule; }
		
		//list+=Expr list+=Expr*
		public Group getGroup() { return cGroup; }
		
		//list+=Expr
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//Expr
		public RuleCall getListExprParserRuleCall_0_0() { return cListExprParserRuleCall_0_0; }
		
		//list+=Expr*
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//Expr
		public RuleCall getListExprParserRuleCall_1_0() { return cListExprParserRuleCall_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Expr");
		private final RuleCall cExprAndParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ExprAnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprAnd
		public RuleCall getExprAndParserRuleCall() { return cExprAndParserRuleCall; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAnd Expr:
		//	ExprOr ({ExprAnd.left=current} 'and' right=ExprOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprOr ({ExprAnd.left=current} 'and' right=ExprOr)*
		public Group getGroup() { return cGroup; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }
		
		//({ExprAnd.left=current} 'and' right=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExprAnd.left=current}
		public Action getExprAndLeftAction_1_0() { return cExprAndLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=ExprOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExprOr
		public RuleCall getRightExprOrParserRuleCall_1_2_0() { return cRightExprOrParserRuleCall_1_2_0; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprNotParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprOr Expr:
		//	ExprNot ({ExprOr.left=current} 'or' right=ExprNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprNot ({ExprOr.left=current} 'or' right=ExprNot)*
		public Group getGroup() { return cGroup; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_0() { return cExprNotParserRuleCall_0; }
		
		//({ExprOr.left=current} 'or' right=ExprNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExprOr.left=current}
		public Action getExprOrLeftAction_1_0() { return cExprOrLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=ExprNot
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExprNot
		public RuleCall getRightExprNotParserRuleCall_1_2_0() { return cRightExprNotParserRuleCall_1_2_0; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExprEqParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cExprEqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNot Expr:
		//	{ExprNot} 'not' expr=ExprEq | ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprNot} 'not' expr=ExprEq | ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExprNot} 'not' expr=ExprEq
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExprNot}
		public Action getExprNotAction_0_0() { return cExprNotAction_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//expr=ExprEq
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//ExprEq
		public RuleCall getExprExprEqParserRuleCall_0_2_0() { return cExprExprEqParserRuleCall_0_2_0; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_1() { return cExprEqParserRuleCall_1; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ExprEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprEqLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprSimpleParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprEq Expr:
		//	ExprSimple ({ExprEq.left=current} '=?' right=ExprSimple)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSimple ({ExprEq.left=current} '=?' right=ExprSimple)?
		public Group getGroup() { return cGroup; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0() { return cExprSimpleParserRuleCall_0; }
		
		//({ExprEq.left=current} '=?' right=ExprSimple)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExprEq.left=current}
		public Action getExprEqLeftAction_1_0() { return cExprEqLeftAction_1_0; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_1_1() { return cEqualsSignQuestionMarkKeyword_1_1; }
		
		//right=ExprSimple
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExprSimple
		public RuleCall getRightExprSimpleParserRuleCall_1_2_0() { return cRightExprSimpleParserRuleCall_1_2_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNillAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNILTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSymbolAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSYMBOLETerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Action cConsAction_3_1_0_0 = (Action)cGroup_3_1_0.eContents().get(0);
		private final Keyword cConsKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cExprsAssignment_3_1_0_2 = (Assignment)cGroup_3_1_0.eContents().get(2);
		private final RuleCall cExprsLExprParserRuleCall_3_1_0_2_0 = (RuleCall)cExprsAssignment_3_1_0_2.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Action cListAction_3_1_1_0 = (Action)cGroup_3_1_1.eContents().get(0);
		private final Keyword cListKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cExprsAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final RuleCall cExprsLExprParserRuleCall_3_1_1_2_0 = (RuleCall)cExprsAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Action cHdAction_3_1_2_0 = (Action)cGroup_3_1_2.eContents().get(0);
		private final Keyword cHdKeyword_3_1_2_1 = (Keyword)cGroup_3_1_2.eContents().get(1);
		private final Assignment cExprAssignment_3_1_2_2 = (Assignment)cGroup_3_1_2.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_3_1_2_2_0 = (RuleCall)cExprAssignment_3_1_2_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cAlternatives_3_1.eContents().get(3);
		private final Action cTlAction_3_1_3_0 = (Action)cGroup_3_1_3.eContents().get(0);
		private final Keyword cTlKeyword_3_1_3_1 = (Keyword)cGroup_3_1_3.eContents().get(1);
		private final Assignment cExprAssignment_3_1_3_2 = (Assignment)cGroup_3_1_3.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_3_1_3_2_0 = (RuleCall)cExprAssignment_3_1_3_2.eContents().get(0);
		private final Group cGroup_3_1_4 = (Group)cAlternatives_3_1.eContents().get(4);
		private final Action cCallAction_3_1_4_0 = (Action)cGroup_3_1_4.eContents().get(0);
		private final Assignment cNameAssignment_3_1_4_1 = (Assignment)cGroup_3_1_4.eContents().get(1);
		private final RuleCall cNameSYMBOLETerminalRuleCall_3_1_4_1_0 = (RuleCall)cNameAssignment_3_1_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_4_2 = (Assignment)cGroup_3_1_4.eContents().get(2);
		private final RuleCall cParamsLExprParserRuleCall_3_1_4_2_0 = (RuleCall)cParamsAssignment_3_1_4_2.eContents().get(0);
		private final Group cGroup_3_1_5 = (Group)cAlternatives_3_1.eContents().get(5);
		private final Action cEnclosedExprAction_3_1_5_0 = (Action)cGroup_3_1_5.eContents().get(0);
		private final Assignment cExprAssignment_3_1_5_1 = (Assignment)cGroup_3_1_5.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_3_1_5_1_0 = (RuleCall)cExprAssignment_3_1_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ExprSimple Expr:
		//	{Nill} value=NIL | {Variable} value=VARIABLE | {Symbol} value=SYMBOLE |
		//	'(' ({Cons} 'cons' exprs=LExpr | {List} 'list' exprs=LExpr | {Hd} 'hd' expr=Expr | {Tl} 'tl' expr=Expr | {Call}
		//	name=SYMBOLE params=LExpr | {EnclosedExpr} expr=Expr) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Nill} value=NIL | {Variable} value=VARIABLE | {Symbol} value=SYMBOLE | '(' ({Cons} 'cons' exprs=LExpr | {List} 'list'
		//exprs=LExpr | {Hd} 'hd' expr=Expr | {Tl} 'tl' expr=Expr | {Call} name=SYMBOLE params=LExpr | {EnclosedExpr} expr=Expr)
		//')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Nill} value=NIL
		public Group getGroup_0() { return cGroup_0; }
		
		//{Nill}
		public Action getNillAction_0_0() { return cNillAction_0_0; }
		
		//value=NIL
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NIL
		public RuleCall getValueNILTerminalRuleCall_0_1_0() { return cValueNILTerminalRuleCall_0_1_0; }
		
		//{Variable} value=VARIABLE
		public Group getGroup_1() { return cGroup_1; }
		
		//{Variable}
		public Action getVariableAction_1_0() { return cVariableAction_1_0; }
		
		//value=VARIABLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getValueVARIABLETerminalRuleCall_1_1_0() { return cValueVARIABLETerminalRuleCall_1_1_0; }
		
		//{Symbol} value=SYMBOLE
		public Group getGroup_2() { return cGroup_2; }
		
		//{Symbol}
		public Action getSymbolAction_2_0() { return cSymbolAction_2_0; }
		
		//value=SYMBOLE
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//SYMBOLE
		public RuleCall getValueSYMBOLETerminalRuleCall_2_1_0() { return cValueSYMBOLETerminalRuleCall_2_1_0; }
		
		//'(' ({Cons} 'cons' exprs=LExpr | {List} 'list' exprs=LExpr | {Hd} 'hd' expr=Expr | {Tl} 'tl' expr=Expr | {Call}
		//name=SYMBOLE params=LExpr | {EnclosedExpr} expr=Expr) ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//{Cons} 'cons' exprs=LExpr | {List} 'list' exprs=LExpr | {Hd} 'hd' expr=Expr | {Tl} 'tl' expr=Expr | {Call} name=SYMBOLE
		//params=LExpr | {EnclosedExpr} expr=Expr
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//{Cons} 'cons' exprs=LExpr
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//{Cons}
		public Action getConsAction_3_1_0_0() { return cConsAction_3_1_0_0; }
		
		//'cons'
		public Keyword getConsKeyword_3_1_0_1() { return cConsKeyword_3_1_0_1; }
		
		//exprs=LExpr
		public Assignment getExprsAssignment_3_1_0_2() { return cExprsAssignment_3_1_0_2; }
		
		//LExpr
		public RuleCall getExprsLExprParserRuleCall_3_1_0_2_0() { return cExprsLExprParserRuleCall_3_1_0_2_0; }
		
		//{List} 'list' exprs=LExpr
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//{List}
		public Action getListAction_3_1_1_0() { return cListAction_3_1_1_0; }
		
		//'list'
		public Keyword getListKeyword_3_1_1_1() { return cListKeyword_3_1_1_1; }
		
		//exprs=LExpr
		public Assignment getExprsAssignment_3_1_1_2() { return cExprsAssignment_3_1_1_2; }
		
		//LExpr
		public RuleCall getExprsLExprParserRuleCall_3_1_1_2_0() { return cExprsLExprParserRuleCall_3_1_1_2_0; }
		
		//{Hd} 'hd' expr=Expr
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//{Hd}
		public Action getHdAction_3_1_2_0() { return cHdAction_3_1_2_0; }
		
		//'hd'
		public Keyword getHdKeyword_3_1_2_1() { return cHdKeyword_3_1_2_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_3_1_2_2() { return cExprAssignment_3_1_2_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_1_2_2_0() { return cExprExprParserRuleCall_3_1_2_2_0; }
		
		//{Tl} 'tl' expr=Expr
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//{Tl}
		public Action getTlAction_3_1_3_0() { return cTlAction_3_1_3_0; }
		
		//'tl'
		public Keyword getTlKeyword_3_1_3_1() { return cTlKeyword_3_1_3_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_3_1_3_2() { return cExprAssignment_3_1_3_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_1_3_2_0() { return cExprExprParserRuleCall_3_1_3_2_0; }
		
		//{Call} name=SYMBOLE params=LExpr
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }
		
		//{Call}
		public Action getCallAction_3_1_4_0() { return cCallAction_3_1_4_0; }
		
		//name=SYMBOLE
		public Assignment getNameAssignment_3_1_4_1() { return cNameAssignment_3_1_4_1; }
		
		//SYMBOLE
		public RuleCall getNameSYMBOLETerminalRuleCall_3_1_4_1_0() { return cNameSYMBOLETerminalRuleCall_3_1_4_1_0; }
		
		//params=LExpr
		public Assignment getParamsAssignment_3_1_4_2() { return cParamsAssignment_3_1_4_2; }
		
		//LExpr
		public RuleCall getParamsLExprParserRuleCall_3_1_4_2_0() { return cParamsLExprParserRuleCall_3_1_4_2_0; }
		
		//{EnclosedExpr} expr=Expr
		public Group getGroup_3_1_5() { return cGroup_3_1_5; }
		
		//{EnclosedExpr}
		public Action getEnclosedExprAction_3_1_5_0() { return cEnclosedExprAction_3_1_5_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_3_1_5_1() { return cExprAssignment_3_1_5_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_1_5_1_0() { return cExprExprParserRuleCall_3_1_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final VarsElements pVars;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final IfElements pIf;
	private final AffectElements pAffect;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final NopElements pNop;
	private final ForEachElements pForEach;
	private final ExprsElements pExprs;
	private final LExprElements pLExpr;
	private final ExprElements pExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final ExprSimpleElements pExprSimple;
	private final TerminalRule tNIL;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pVars = new VarsElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pIf = new IfElements();
		this.pAffect = new AffectElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pNop = new NopElements();
		this.pForEach = new ForEachElements();
		this.pExprs = new ExprsElements();
		this.pLExpr = new LExprElements();
		this.pExpr = new ExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pExprSimple = new ExprSimpleElements();
		this.tNIL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.NIL");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.VARIABLE");
		this.tSYMBOLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.SYMBOLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("esir.compilation.Whdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	functions+=Function*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' name=SYMBOLE ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	input=Input '%'
	//	commands=Commands
	//	'%' output=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	///*Input Output */ Input:
	//	'read' vars=Vars;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	'write' vars=Vars;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Vars:
	//	list+=VARIABLE (',' list+=VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	///*COMMAND */ Commands:
	//	list+=Command (';' list+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	cmd=Nop | cmd=Affect | cmd=If | cmd=For | cmd=While | cmd=ForEach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//If:
	//	'if' condition=Expr 'then' thenCommands=Commands ('else' elseCommands=Commands)? 'fi';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Affect:
	//	vars=Vars ':=' exprs=Exprs;
	public AffectElements getAffectAccess() {
		return pAffect;
	}
	
	public ParserRule getAffectRule() {
		return getAffectAccess().getRule();
	}
	
	//For:
	//	'for' condition=Expr 'do' commands=Commands 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//While:
	//	'while' condition=Expr 'do' commands=Commands 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Nop:
	//	nop='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//ForEach:
	//	'foreach' elem=Expr 'in' ensemb=Expr 'do' commands=Commands 'od';
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	///* EXPRESSIONS */ Exprs:
	//	list+=Expr (',' list+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//// expressions séparées par des blancs, ex: (cons nil (cons nil Y))
	//LExpr:
	//	list+=Expr list+=Expr*;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//Expr:
	//	ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprAnd Expr:
	//	ExprOr ({ExprAnd.left=current} 'and' right=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr Expr:
	//	ExprNot ({ExprOr.left=current} 'or' right=ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot Expr:
	//	{ExprNot} 'not' expr=ExprEq | ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq Expr:
	//	ExprSimple ({ExprEq.left=current} '=?' right=ExprSimple)?;
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//ExprSimple Expr:
	//	{Nill} value=NIL | {Variable} value=VARIABLE | {Symbol} value=SYMBOLE |
	//	'(' ({Cons} 'cons' exprs=LExpr | {List} 'list' exprs=LExpr | {Hd} 'hd' expr=Expr | {Tl} 'tl' expr=Expr | {Call}
	//	name=SYMBOLE params=LExpr | {EnclosedExpr} expr=Expr) ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//terminal NIL:
	//	'Nil' | 'nil';
	public TerminalRule getNILRule() {
		return tNIL;
	}
	
	//terminal VARIABLE:
	//	'A'..'Z'+;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOLE:
	//	'a'..'z'+;
	public TerminalRule getSYMBOLERule() {
		return tSYMBOLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
