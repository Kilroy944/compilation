/*
 * generated by Xtext 2.13.0
 */
package esir.compilation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Program");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//Program:
		//	function+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//function+=Function*
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0() { return cFunctionFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSYMBOLETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' name=SYMBOLE ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=SYMBOLE ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=SYMBOLE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SYMBOLE
		public RuleCall getNameSYMBOLETerminalRuleCall_1_0() { return cNameSYMBOLETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputInputParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandsParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputOutputParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		
		//Definition:
		//	input=Input '%'
		//	commands=Commands
		//	'%' output=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//input=Input '%' commands=Commands '%' output=Output
		public Group getGroup() { return cGroup; }
		
		//input=Input
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_0() { return cInputInputParserRuleCall_0_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_2_0() { return cCommandsCommandsParserRuleCall_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//output=Output
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_4_0() { return cOutputOutputParserRuleCall_4_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		///*Input Output */ Input:
		//	'read' variables+=VARIABLE (',' variables+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' variables+=VARIABLE (',' variables+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_1_0() { return cVariablesVARIABLETerminalRuleCall_1_0; }
		
		//(',' variables+=VARIABLE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_2_1_0() { return cVariablesVARIABLETerminalRuleCall_2_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVARIABLETerminalRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//Output:
		//	'write' variables+=VARIABLE (',' variables+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'write' variables+=VARIABLE (',' variables+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//'write'
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_1_0() { return cVariablesVARIABLETerminalRuleCall_1_0; }
		
		//(',' variables+=VARIABLE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VARIABLE
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VARIABLE
		public RuleCall getVariablesVARIABLETerminalRuleCall_2_1_0() { return cVariablesVARIABLETerminalRuleCall_2_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_0_0 = (RuleCall)cCommandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		
		///*COMMAND */ Commands:
		//	commands+=Command (';' commands+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command (';' commands+=Command)*
		public Group getGroup() { return cGroup; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_0() { return cCommandsAssignment_0; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0_0() { return cCommandsCommandParserRuleCall_0_0; }
		
		//(';' commands+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_1_0() { return cCommandsCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNopAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNopNOPTerminalRuleCall_0_0 = (RuleCall)cNopAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVarsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_1_0_0 = (RuleCall)cVarsAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExprsParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Command:
		//	nop=NOP | vars=Vars ':=' expression=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//nop=NOP | vars=Vars ':=' expression=Exprs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nop=NOP
		public Assignment getNopAssignment_0() { return cNopAssignment_0; }
		
		//NOP
		public RuleCall getNopNOPTerminalRuleCall_0_0() { return cNopNOPTerminalRuleCall_0_0; }
		
		//vars=Vars ':=' expression=Exprs
		public Group getGroup_1() { return cGroup_1; }
		
		//vars=Vars
		public Assignment getVarsAssignment_1_0() { return cVarsAssignment_1_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_1_0_0() { return cVarsVarsParserRuleCall_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//expression=Exprs
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Exprs
		public RuleCall getExpressionExprsParserRuleCall_1_2_0() { return cExpressionExprsParserRuleCall_1_2_0; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVARIABLETerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVarsParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	variable+=VARIABLE (',' vars+=Vars)*;
		@Override public ParserRule getRule() { return rule; }
		
		//variable+=VARIABLE (',' vars+=Vars)*
		public Group getGroup() { return cGroup; }
		
		//variable+=VARIABLE
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_0_0() { return cVariableVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=Vars)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=Vars
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_1_1_0() { return cVarsVarsParserRuleCall_1_1_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//Exprs:
		//	expr+=Expr (',' expr+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=Expr (',' expr+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//expr+=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }
		
		//(',' expr+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expr+=Expr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_1_0() { return cExprExprParserRuleCall_1_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.Expr");
		private final Keyword cDigitOneKeyword = (Keyword)rule.eContents().get(1);
		
		//Expr:
		//	"1";
		@Override public ParserRule getRule() { return rule; }
		
		//"1"
		public Keyword getDigitOneKeyword() { return cDigitOneKeyword; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final TerminalRule tNIL;
	private final TerminalRule tNOP;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.tNIL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.NIL");
		this.tNOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.NOP");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.VARIABLE");
		this.tSYMBOLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.Whdsl.SYMBOLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("esir.compilation.Whdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	function+=Function*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' name=SYMBOLE ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	input=Input '%'
	//	commands=Commands
	//	'%' output=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	///*Input Output */ Input:
	//	'read' variables+=VARIABLE (',' variables+=VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	'write' variables+=VARIABLE (',' variables+=VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	///*COMMAND */ Commands:
	//	commands+=Command (';' commands+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	nop=NOP | vars=Vars ':=' expression=Exprs;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Vars:
	//	variable+=VARIABLE (',' vars+=Vars)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//	expr+=Expr (',' expr+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	"1";
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//terminal NIL:
	//	'Nil' | 'nil';
	public TerminalRule getNILRule() {
		return tNIL;
	}
	
	//terminal NOP:
	//	'nop';
	public TerminalRule getNOPRule() {
		return tNOP;
	}
	
	//terminal VARIABLE:
	//	'A'..'Z'*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOLE:
	//	'a'..'z'*;
	public TerminalRule getSYMBOLERule() {
		return tSYMBOLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
