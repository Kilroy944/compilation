/**
 * generated by Xtext 2.13.0
 */
package esir.compilation.whdsl.impl;

import esir.compilation.whdsl.Expr;
import esir.compilation.whdsl.ExprSimple;
import esir.compilation.whdsl.LExpr;
import esir.compilation.whdsl.WhdslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Simple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getNil <em>Nil</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getVar <em>Var</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getSym <em>Sym</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getCons <em>Cons</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getList <em>List</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getHd <em>Hd</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getTl <em>Tl</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getFuncName <em>Func Name</em>}</li>
 *   <li>{@link esir.compilation.whdsl.impl.ExprSimpleImpl#getFuncParams <em>Func Params</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSimpleImpl extends MinimalEObjectImpl.Container implements ExprSimple
{
  /**
   * The default value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected static final String NIL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected String nil = NIL_EDEFAULT;

  /**
   * The default value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected static final String VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected String var = VAR_EDEFAULT;

  /**
   * The default value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected static final String SYM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected String sym = SYM_EDEFAULT;

  /**
   * The cached value of the '{@link #getCons() <em>Cons</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCons()
   * @generated
   * @ordered
   */
  protected LExpr cons;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected LExpr list;

  /**
   * The cached value of the '{@link #getHd() <em>Hd</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHd()
   * @generated
   * @ordered
   */
  protected Expr hd;

  /**
   * The cached value of the '{@link #getTl() <em>Tl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTl()
   * @generated
   * @ordered
   */
  protected Expr tl;

  /**
   * The default value of the '{@link #getFuncName() <em>Func Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFuncName()
   * @generated
   * @ordered
   */
  protected static final String FUNC_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFuncName() <em>Func Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFuncName()
   * @generated
   * @ordered
   */
  protected String funcName = FUNC_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getFuncParams() <em>Func Params</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFuncParams()
   * @generated
   * @ordered
   */
  protected LExpr funcParams;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprSimpleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhdslPackage.Literals.EXPR_SIMPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNil()
  {
    return nil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNil(String newNil)
  {
    String oldNil = nil;
    nil = newNil;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__NIL, oldNil, nil));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar(String newVar)
  {
    String oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSym()
  {
    return sym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSym(String newSym)
  {
    String oldSym = sym;
    sym = newSym;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__SYM, oldSym, sym));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getCons()
  {
    return cons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCons(LExpr newCons, NotificationChain msgs)
  {
    LExpr oldCons = cons;
    cons = newCons;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__CONS, oldCons, newCons);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCons(LExpr newCons)
  {
    if (newCons != cons)
    {
      NotificationChain msgs = null;
      if (cons != null)
        msgs = ((InternalEObject)cons).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__CONS, null, msgs);
      if (newCons != null)
        msgs = ((InternalEObject)newCons).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__CONS, null, msgs);
      msgs = basicSetCons(newCons, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__CONS, newCons, newCons));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(LExpr newList, NotificationChain msgs)
  {
    LExpr oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setList(LExpr newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getHd()
  {
    return hd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHd(Expr newHd, NotificationChain msgs)
  {
    Expr oldHd = hd;
    hd = newHd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__HD, oldHd, newHd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHd(Expr newHd)
  {
    if (newHd != hd)
    {
      NotificationChain msgs = null;
      if (hd != null)
        msgs = ((InternalEObject)hd).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__HD, null, msgs);
      if (newHd != null)
        msgs = ((InternalEObject)newHd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__HD, null, msgs);
      msgs = basicSetHd(newHd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__HD, newHd, newHd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getTl()
  {
    return tl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTl(Expr newTl, NotificationChain msgs)
  {
    Expr oldTl = tl;
    tl = newTl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__TL, oldTl, newTl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTl(Expr newTl)
  {
    if (newTl != tl)
    {
      NotificationChain msgs = null;
      if (tl != null)
        msgs = ((InternalEObject)tl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__TL, null, msgs);
      if (newTl != null)
        msgs = ((InternalEObject)newTl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__TL, null, msgs);
      msgs = basicSetTl(newTl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__TL, newTl, newTl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFuncName()
  {
    return funcName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFuncName(String newFuncName)
  {
    String oldFuncName = funcName;
    funcName = newFuncName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__FUNC_NAME, oldFuncName, funcName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpr getFuncParams()
  {
    return funcParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFuncParams(LExpr newFuncParams, NotificationChain msgs)
  {
    LExpr oldFuncParams = funcParams;
    funcParams = newFuncParams;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS, oldFuncParams, newFuncParams);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFuncParams(LExpr newFuncParams)
  {
    if (newFuncParams != funcParams)
    {
      NotificationChain msgs = null;
      if (funcParams != null)
        msgs = ((InternalEObject)funcParams).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS, null, msgs);
      if (newFuncParams != null)
        msgs = ((InternalEObject)newFuncParams).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS, null, msgs);
      msgs = basicSetFuncParams(newFuncParams, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS, newFuncParams, newFuncParams));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhdslPackage.EXPR_SIMPLE__CONS:
        return basicSetCons(null, msgs);
      case WhdslPackage.EXPR_SIMPLE__LIST:
        return basicSetList(null, msgs);
      case WhdslPackage.EXPR_SIMPLE__HD:
        return basicSetHd(null, msgs);
      case WhdslPackage.EXPR_SIMPLE__TL:
        return basicSetTl(null, msgs);
      case WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS:
        return basicSetFuncParams(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhdslPackage.EXPR_SIMPLE__NIL:
        return getNil();
      case WhdslPackage.EXPR_SIMPLE__VAR:
        return getVar();
      case WhdslPackage.EXPR_SIMPLE__SYM:
        return getSym();
      case WhdslPackage.EXPR_SIMPLE__CONS:
        return getCons();
      case WhdslPackage.EXPR_SIMPLE__LIST:
        return getList();
      case WhdslPackage.EXPR_SIMPLE__HD:
        return getHd();
      case WhdslPackage.EXPR_SIMPLE__TL:
        return getTl();
      case WhdslPackage.EXPR_SIMPLE__FUNC_NAME:
        return getFuncName();
      case WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS:
        return getFuncParams();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhdslPackage.EXPR_SIMPLE__NIL:
        setNil((String)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__VAR:
        setVar((String)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__SYM:
        setSym((String)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__CONS:
        setCons((LExpr)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__LIST:
        setList((LExpr)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__HD:
        setHd((Expr)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__TL:
        setTl((Expr)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__FUNC_NAME:
        setFuncName((String)newValue);
        return;
      case WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS:
        setFuncParams((LExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhdslPackage.EXPR_SIMPLE__NIL:
        setNil(NIL_EDEFAULT);
        return;
      case WhdslPackage.EXPR_SIMPLE__VAR:
        setVar(VAR_EDEFAULT);
        return;
      case WhdslPackage.EXPR_SIMPLE__SYM:
        setSym(SYM_EDEFAULT);
        return;
      case WhdslPackage.EXPR_SIMPLE__CONS:
        setCons((LExpr)null);
        return;
      case WhdslPackage.EXPR_SIMPLE__LIST:
        setList((LExpr)null);
        return;
      case WhdslPackage.EXPR_SIMPLE__HD:
        setHd((Expr)null);
        return;
      case WhdslPackage.EXPR_SIMPLE__TL:
        setTl((Expr)null);
        return;
      case WhdslPackage.EXPR_SIMPLE__FUNC_NAME:
        setFuncName(FUNC_NAME_EDEFAULT);
        return;
      case WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS:
        setFuncParams((LExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhdslPackage.EXPR_SIMPLE__NIL:
        return NIL_EDEFAULT == null ? nil != null : !NIL_EDEFAULT.equals(nil);
      case WhdslPackage.EXPR_SIMPLE__VAR:
        return VAR_EDEFAULT == null ? var != null : !VAR_EDEFAULT.equals(var);
      case WhdslPackage.EXPR_SIMPLE__SYM:
        return SYM_EDEFAULT == null ? sym != null : !SYM_EDEFAULT.equals(sym);
      case WhdslPackage.EXPR_SIMPLE__CONS:
        return cons != null;
      case WhdslPackage.EXPR_SIMPLE__LIST:
        return list != null;
      case WhdslPackage.EXPR_SIMPLE__HD:
        return hd != null;
      case WhdslPackage.EXPR_SIMPLE__TL:
        return tl != null;
      case WhdslPackage.EXPR_SIMPLE__FUNC_NAME:
        return FUNC_NAME_EDEFAULT == null ? funcName != null : !FUNC_NAME_EDEFAULT.equals(funcName);
      case WhdslPackage.EXPR_SIMPLE__FUNC_PARAMS:
        return funcParams != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (nil: ");
    result.append(nil);
    result.append(", var: ");
    result.append(var);
    result.append(", sym: ");
    result.append(sym);
    result.append(", funcName: ");
    result.append(funcName);
    result.append(')');
    return result.toString();
  }

} //ExprSimpleImpl
