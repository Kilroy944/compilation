/*
 * generated by Xtext 2.13.0
 */
package esir.compilation.serializer;

import com.google.inject.Inject;
import esir.compilation.services.WhdslGrammarAccess;
import esir.compilation.whdsl.Affect;
import esir.compilation.whdsl.Command;
import esir.compilation.whdsl.Commands;
import esir.compilation.whdsl.Definition;
import esir.compilation.whdsl.Exprs;
import esir.compilation.whdsl.For;
import esir.compilation.whdsl.ForEach;
import esir.compilation.whdsl.Function;
import esir.compilation.whdsl.If;
import esir.compilation.whdsl.Input;
import esir.compilation.whdsl.Nop;
import esir.compilation.whdsl.Output;
import esir.compilation.whdsl.Program;
import esir.compilation.whdsl.Vars;
import esir.compilation.whdsl.WhdslPackage;
import esir.compilation.whdsl.While;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class WhdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WhdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WhdslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WhdslPackage.AFFECT:
				sequence_Affect(context, (Affect) semanticObject); 
				return; 
			case WhdslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case WhdslPackage.COMMANDS:
				sequence_Commands(context, (Commands) semanticObject); 
				return; 
			case WhdslPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case WhdslPackage.EXPRS:
				sequence_Exprs(context, (Exprs) semanticObject); 
				return; 
			case WhdslPackage.FOR:
				sequence_For(context, (For) semanticObject); 
				return; 
			case WhdslPackage.FOR_EACH:
				sequence_ForEach(context, (ForEach) semanticObject); 
				return; 
			case WhdslPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case WhdslPackage.IF:
				sequence_If(context, (If) semanticObject); 
				return; 
			case WhdslPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case WhdslPackage.NOP:
				sequence_Nop(context, (Nop) semanticObject); 
				return; 
			case WhdslPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case WhdslPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case WhdslPackage.VARS:
				sequence_Vars(context, (Vars) semanticObject); 
				return; 
			case WhdslPackage.WHILE:
				sequence_While(context, (While) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Affect returns Affect
	 *
	 * Constraint:
	 *     (vars=Vars exprs=Exprs)
	 */
	protected void sequence_Affect(ISerializationContext context, Affect semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.AFFECT__VARS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.AFFECT__VARS));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.AFFECT__EXPRS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.AFFECT__EXPRS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAffectAccess().getVarsVarsParserRuleCall_0_0(), semanticObject.getVars());
		feeder.accept(grammarAccess.getAffectAccess().getExprsExprsParserRuleCall_2_0(), semanticObject.getExprs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (
	 *         cmd=Nop | 
	 *         cmd=Affect | 
	 *         cmd=If | 
	 *         cmd=For | 
	 *         cmd=While | 
	 *         cmd=ForEach
	 *     )
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Commands returns Commands
	 *
	 * Constraint:
	 *     (command=Command commands+=Command*)
	 */
	protected void sequence_Commands(ISerializationContext context, Commands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns Definition
	 *
	 * Constraint:
	 *     (input=Input commands=Commands output=Output)
	 */
	protected void sequence_Definition(ISerializationContext context, Definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.DEFINITION__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.DEFINITION__INPUT));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.DEFINITION__COMMANDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.DEFINITION__COMMANDS));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.DEFINITION__OUTPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.DEFINITION__OUTPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefinitionAccess().getInputInputParserRuleCall_0_0(), semanticObject.getInput());
		feeder.accept(grammarAccess.getDefinitionAccess().getCommandsCommandsParserRuleCall_2_0(), semanticObject.getCommands());
		feeder.accept(grammarAccess.getDefinitionAccess().getOutputOutputParserRuleCall_4_0(), semanticObject.getOutput());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exprs returns Exprs
	 *
	 * Constraint:
	 *     (expr=Expr exprs+=Expr*)
	 */
	protected void sequence_Exprs(ISerializationContext context, Exprs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForEach returns ForEach
	 *
	 * Constraint:
	 *     (elem=Expr ensemb=Expr cmds=Commands)
	 */
	protected void sequence_ForEach(ISerializationContext context, ForEach semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FOR_EACH__ELEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FOR_EACH__ELEM));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FOR_EACH__ENSEMB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FOR_EACH__ENSEMB));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FOR_EACH__CMDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FOR_EACH__CMDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForEachAccess().getElemExprParserRuleCall_1_0(), semanticObject.getElem());
		feeder.accept(grammarAccess.getForEachAccess().getEnsembExprParserRuleCall_3_0(), semanticObject.getEnsemb());
		feeder.accept(grammarAccess.getForEachAccess().getCmdsCommandsParserRuleCall_5_0(), semanticObject.getCmds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     For returns For
	 *
	 * Constraint:
	 *     (cond=Expr cmds=Commands)
	 */
	protected void sequence_For(ISerializationContext context, For semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FOR__COND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FOR__COND));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FOR__CMDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FOR__CMDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForAccess().getCondExprParserRuleCall_1_0(), semanticObject.getCond());
		feeder.accept(grammarAccess.getForAccess().getCmdsCommandsParserRuleCall_3_0(), semanticObject.getCmds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=SYMBOLE definition=Definition)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FUNCTION__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FUNCTION__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameSYMBOLETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     If returns If
	 *
	 * Constraint:
	 *     (cond=Expr cmdsThen=Commands cmdsElse=Commands?)
	 */
	protected void sequence_If(ISerializationContext context, If semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (variables+=VARIABLE variables+=VARIABLE*)
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nop returns Nop
	 *
	 * Constraint:
	 *     nop='nop'
	 */
	protected void sequence_Nop(ISerializationContext context, Nop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.NOP__NOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.NOP__NOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNopAccess().getNopNopKeyword_0(), semanticObject.getNop());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (variables+=VARIABLE variables+=VARIABLE*)
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     functions+=Function+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vars returns Vars
	 *
	 * Constraint:
	 *     (var=VARIABLE vars+=VARIABLE*)
	 */
	protected void sequence_Vars(ISerializationContext context, Vars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     While returns While
	 *
	 * Constraint:
	 *     (cond=Expr cmds=Commands)
	 */
	protected void sequence_While(ISerializationContext context, While semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.WHILE__COND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.WHILE__COND));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.WHILE__CMDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.WHILE__CMDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhileAccess().getCondExprParserRuleCall_1_0(), semanticObject.getCond());
		feeder.accept(grammarAccess.getWhileAccess().getCmdsCommandsParserRuleCall_3_0(), semanticObject.getCmds());
		feeder.finish();
	}
	
	
}
