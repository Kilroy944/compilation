/*
 * generated by Xtext 2.10.0
 */
package esir.compilation.serializer;

import com.google.inject.Inject;
import esir.compilation.services.WhdslGrammarAccess;
import esir.compilation.whdsl.Command;
import esir.compilation.whdsl.CommandForEach;
import esir.compilation.whdsl.CommandIf;
import esir.compilation.whdsl.CommandWhile;
import esir.compilation.whdsl.Commands;
import esir.compilation.whdsl.Definition;
import esir.compilation.whdsl.Expr;
import esir.compilation.whdsl.ExprAnd;
import esir.compilation.whdsl.ExprEq;
import esir.compilation.whdsl.ExprNot;
import esir.compilation.whdsl.ExprOr;
import esir.compilation.whdsl.ExprSimple;
import esir.compilation.whdsl.Exprs;
import esir.compilation.whdsl.Function;
import esir.compilation.whdsl.Input;
import esir.compilation.whdsl.Output;
import esir.compilation.whdsl.Program;
import esir.compilation.whdsl.Vars;
import esir.compilation.whdsl.WhdslPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class WhdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WhdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WhdslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WhdslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case WhdslPackage.COMMAND_FOR_EACH:
				sequence_CommandForEach(context, (CommandForEach) semanticObject); 
				return; 
			case WhdslPackage.COMMAND_IF:
				sequence_CommandIf(context, (CommandIf) semanticObject); 
				return; 
			case WhdslPackage.COMMAND_WHILE:
				sequence_CommandWhile(context, (CommandWhile) semanticObject); 
				return; 
			case WhdslPackage.COMMANDS:
				sequence_Commands(context, (Commands) semanticObject); 
				return; 
			case WhdslPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case WhdslPackage.EXPR:
				sequence_Expr(context, (Expr) semanticObject); 
				return; 
			case WhdslPackage.EXPR_AND:
				sequence_ExprAnd(context, (ExprAnd) semanticObject); 
				return; 
			case WhdslPackage.EXPR_EQ:
				sequence_ExprEq(context, (ExprEq) semanticObject); 
				return; 
			case WhdslPackage.EXPR_NOT:
				sequence_ExprNot(context, (ExprNot) semanticObject); 
				return; 
			case WhdslPackage.EXPR_OR:
				sequence_ExprOr(context, (ExprOr) semanticObject); 
				return; 
			case WhdslPackage.EXPR_SIMPLE:
				sequence_ExprSimple(context, (ExprSimple) semanticObject); 
				return; 
			case WhdslPackage.EXPRS:
				sequence_Exprs(context, (Exprs) semanticObject); 
				return; 
			case WhdslPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case WhdslPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case WhdslPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case WhdslPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case WhdslPackage.VARS:
				sequence_Vars(context, (Vars) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CommandForEach returns CommandForEach
	 *
	 * Constraint:
	 *     (elem=Expr ensemb=Expr cmds=Commands)
	 */
	protected void sequence_CommandForEach(ISerializationContext context, CommandForEach semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.COMMAND_FOR_EACH__ELEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.COMMAND_FOR_EACH__ELEM));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.COMMAND_FOR_EACH__ENSEMB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.COMMAND_FOR_EACH__ENSEMB));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.COMMAND_FOR_EACH__CMDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.COMMAND_FOR_EACH__CMDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandForEachAccess().getElemExprParserRuleCall_1_0(), semanticObject.getElem());
		feeder.accept(grammarAccess.getCommandForEachAccess().getEnsembExprParserRuleCall_3_0(), semanticObject.getEnsemb());
		feeder.accept(grammarAccess.getCommandForEachAccess().getCmdsCommandsParserRuleCall_5_0(), semanticObject.getCmds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommandIf returns CommandIf
	 *
	 * Constraint:
	 *     (cond=Expr cmdsThen=Commands cmdsElse=Commands?)
	 */
	protected void sequence_CommandIf(ISerializationContext context, CommandIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandWhile returns CommandWhile
	 *
	 * Constraint:
	 *     (w='while'? expr=Expr cmds=Commands)
	 */
	protected void sequence_CommandWhile(ISerializationContext context, CommandWhile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (nop='nop' | (vars=Vars exprs=Exprs) | cmdWhile=CommandWhile | cmdIf=CommandIf | cmdForEach=CommandForEach)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Commands returns Commands
	 *
	 * Constraint:
	 *     (commande+=Command* commande+=Command)
	 */
	protected void sequence_Commands(ISerializationContext context, Commands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns Definition
	 *
	 * Constraint:
	 *     (inputs=Input commandes=Commands outputs=Output)
	 */
	protected void sequence_Definition(ISerializationContext context, Definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.DEFINITION__INPUTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.DEFINITION__INPUTS));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.DEFINITION__COMMANDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.DEFINITION__COMMANDES));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.DEFINITION__OUTPUTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.DEFINITION__OUTPUTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefinitionAccess().getInputsInputParserRuleCall_1_0(), semanticObject.getInputs());
		feeder.accept(grammarAccess.getDefinitionAccess().getCommandesCommandsParserRuleCall_3_0(), semanticObject.getCommandes());
		feeder.accept(grammarAccess.getDefinitionAccess().getOutputsOutputParserRuleCall_6_0(), semanticObject.getOutputs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExprAnd returns ExprAnd
	 *
	 * Constraint:
	 *     (exprOr=ExprOr (exprAnd='and' exprAndAtt=ExprAnd)?)
	 */
	protected void sequence_ExprAnd(ISerializationContext context, ExprAnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprEq returns ExprEq
	 *
	 * Constraint:
	 *     (expr=Expr | (exprSim1=ExprSimple exprSim2=ExprSimple))
	 */
	protected void sequence_ExprEq(ISerializationContext context, ExprEq semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprNot returns ExprNot
	 *
	 * Constraint:
	 *     (not='not'? exprEq=ExprEq)
	 */
	protected void sequence_ExprNot(ISerializationContext context, ExprNot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprOr returns ExprOr
	 *
	 * Constraint:
	 *     (exprNot=ExprNot (exprOr='or' exprOrAtt=ExprOr)?)
	 */
	protected void sequence_ExprOr(ISerializationContext context, ExprOr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprSimple returns ExprSimple
	 *
	 * Constraint:
	 *     (
	 *         nil='nil' | 
	 *         vari=VARIABLE | 
	 *         symb=SYMBOL | 
	 *         (exprHead='hd' exprHeadAtt=Expr) | 
	 *         (exprTail='tl' exprTailAtt=Expr) | 
	 *         (nomSymb=SYMBOL symbAtt+=Expr+)
	 *     )
	 */
	protected void sequence_ExprSimple(ISerializationContext context, ExprSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expr returns Expr
	 *
	 * Constraint:
	 *     (exprSimp=ExprSimple | exprAnd=ExprAnd)
	 */
	protected void sequence_Expr(ISerializationContext context, Expr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exprs returns Exprs
	 *
	 * Constraint:
	 *     (expGen+=Expr* expGen+=Expr)
	 */
	protected void sequence_Exprs(ISerializationContext context, Exprs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (nom=SYMBOL definition=Definition)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FUNCTION__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FUNCTION__NOM));
			if (transientValues.isValueTransient(semanticObject, WhdslPackage.Literals.FUNCTION__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhdslPackage.Literals.FUNCTION__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNomSYMBOLTerminalRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (varIn+=VARIABLE* varIn+=VARIABLE)
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (varOut+=VARIABLE* varOut+=VARIABLE)
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     fonctions+=Function+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vars returns Vars
	 *
	 * Constraint:
	 *     (varGen+=VARIABLE* varGen+=VARIABLE)
	 */
	protected void sequence_Vars(ISerializationContext context, Vars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
