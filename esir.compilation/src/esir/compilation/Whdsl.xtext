grammar esir.compilation.Whdsl with org.eclipse.xtext.common.Terminals

generate whdsl "http://www.compilation.esir/Whdsl"

Program:
	(functions+=Function)*
;

Function:
	'function'name=SYMBOLE':'definition=Definition
;

Definition:
	input=Input'%'
	commands=Commands
	'%'output=Output
;

/*Input Output */
	
Input:
	'read' vars=Vars
;

Output:
	'write' vars=Vars
;

Vars:
	list+=VARIABLE (',' list+=VARIABLE)*
;		

/*COMMAND */


Commands:
	list+=Command (';' list+=Command)*
;

Command:
	(cmd=Nop) | (cmd=Affect) | (cmd=If) | (cmd=For) | (cmd=While) | (cmd=ForEach)	
;


If:
	'if' condition=Expr 'then' thenCommands=Commands ('else' elseCommands=Commands)? 'fi'
;

Affect:
	vars=Vars ':=' exprs=Exprs
;

For:
	'for' condition=Expr 'do' commands=Commands 'od'
;

While:
	'while' condition=Expr 'do' commands=Commands 'od'
;

Nop:
	nop='nop'
;

ForEach:
	'foreach' elem=Expr 'in' ensemb=Expr 'do' commands=Commands 'od'
;


/* EXPRESSIONS */
Exprs:
	list+=Expr (',' list+=Expr)*
;

// expressions séparées par des blancs, ex: (cons nil (cons nil Y))
LExpr:
	list+=Expr (list+=Expr)*
;

Expr:
	ExprAnd
;

ExprAnd returns Expr:
	ExprOr ({ExprAnd.left=current} 'and' right=ExprOr)*
;

ExprOr returns Expr:
	ExprNot ({ExprOr.left=current} 'or' right=ExprNot)*
;

ExprNot returns Expr:
	{ExprNot} 'not' expr=ExprEq | ExprEq
;

ExprEq returns Expr:
	ExprSimple ({ExprEq.left=current} '=?' right=ExprSimple)?
;

ExprSimple returns Expr:
	{Nill} value=NIL | 
	{Variable} value=VARIABLE |
	{Symbol} value=SYMBOLE |
	'(' (
		{Cons} 'cons' exprs=LExpr |
		{List} 'list' exprs=LExpr |
		{Hd} 'hd' expr=Expr |
		{Tl} 'tl' expr=Expr |
		{Call} name=SYMBOLE params=LExpr |
		{EnclosedExpr} expr=Expr
	) ')'
;

/* TERMINAUX */
terminal NIL:
	'Nil' | 'nil'
;

terminal VARIABLE:
	('A'..'Z')('A'..'Z'|'a'..'z'|'0'..'9')*
;

terminal SYMBOLE:
	('a'..'z')('A'..'Z'|'a'..'z'|'0'..'9')*
;