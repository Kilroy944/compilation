grammar esir.compilation.Whdsl with org.eclipse.xtext.common.Terminals

generate whdsl "http://www.compilation.esir/Whdsl"

//Programme
Program: (fonctions+=Function )*;

//Fonction
Function: 'function' nom=SYMBOL ':' definition=Definition;
//Définition de fonction
Definition:
'read' inputs=Input '%' commandes=Commands '%' 'write' outputs=Output;

//Input de la fonction
Input: (varIn+=VARIABLE ',')*(varIn+=VARIABLE);
//Output de la fonction
Output: (varOut+=VARIABLE ',')*(varOut+=VARIABLE); //varOut = variables Sorties

//Variables
Vars: (varGen += VARIABLE',')* (varGen += VARIABLE); //varGen = variables générales
//Terminal représentant une seule variable
terminal VARIABLE: ('A'..'Z') (('A'..'Z')|('a'..'z')|('0'..'9'))*;

//Commandes
Commands: =>(commande += Command ';')*(commande += Command);
//Les commandes dans cet ordre: nop; Affectation; While; If; ForEach
Command: ( nop ='nop' | vars = Vars ':=' (exprs=Exprs) | cmdWhile = CommandWhile | cmdIf = CommandIf | cmdForEach = CommandForEach);
CommandWhile: (w='while'|'for') expr = Expr 'do' cmds = Commands 'od';
CommandIf: 'if' cond = Expr 'then' cmdsThen = Commands ('else' (cmdsElse = Commands) )? 'fi';
CommandForEach: 'foreach' elem = Expr 'in' ensemb = Expr 'do' cmds = Commands 'od';

//Expression =>
Exprs: =>(expGen += Expr',')* (expGen += Expr);

//Utilisation de => pour eviter le message d'erreur langage non LL(*)
Expr: => (exprSimp = ExprSimple) | (exprAnd = ExprAnd);

//Expression simple dans cet ordre: nil; variable; symbole;
ExprSimple: (nil = 'nil' | vari = VARIABLE | symb = SYMBOL ) |
'(' (exprHead = 'hd') (exprHeadAtt = Expr) ')' | '(' (exprTail = 'tl') (exprTailAtt = Expr) ')' |
'(' (nomSymb = SYMBOL) (symbAtt += Expr+) ')';

//Expression ET
ExprAnd: (exprOr = ExprOr) ((exprAnd = 'and') (exprAndAtt = ExprAnd))?;
//Expression OU
ExprOr: (exprNot = ExprNot) ((exprOr = 'or') (exprOrAtt = ExprOr))?;
//Expression NOT
ExprNot: (not = 'not')? (exprEq = ExprEq);
//Expression d'égalité conditionnelle
ExprEq: '('(expr = Expr)')' | (exprSim1 = ExprSimple)'=?'(exprSim2 = ExprSimple);

//Terminal représentant un symbole
terminal SYMBOL: ('a'..'z') (('A'..'Z')|('a'..'z')|('0'..'9'))*;

//Layout character
terminal LC: (' ')*;