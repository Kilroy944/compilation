
/*
 * generated by Xtext 2.13.0
 */
package esir.compilation.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import esir.compilation.whdsl.Function
import esir.compilation.whdsl.Program
import esir.compilation.whdsl.Commands
import esir.compilation.whdsl.impl.CommandsImpl
import esir.compilation.whdsl.Exprs
import esir.compilation.whdsl.Command
import esir.compilation.whdsl.Vars
import esir.compilation.whdsl.impl.CommandImpl
import esir.compilation.whdsl.Nop
import esir.compilation.whdsl.Affect
import esir.compilation.whdsl.While
import esir.compilation.whdsl.For
import esir.compilation.whdsl.If
import esir.compilation.whdsl.ForEach

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhdslGenerator extends AbstractGenerator {
	
	
	String indent_value = '   ';
	String indent_if = '  ';
	String indent_for = '  ';
	String indent_while = '  ';
	String indent_foreach = '  ';

	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(typeof(Program))){
			fsa.generateFile("sortie.whdsl", e.compile())
		}
	}
	
	def doGenerate (Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String sortie, String indent_value, String indent_if, String indent_for, String indent_foreach, String indent_while) {
		
		this.indent_value = indent_value;
		this.indent_if=indent_if;
		this.indent_for=indent_for;
		this.indent_foreach=indent_foreach;
		this.indent_while=indent_while;
		
		for (e : resource.allContents.toIterable.filter(typeof(Program))){
			fsa.generateFile(sortie, e.compile())
		}
	}
	
	def compile (Program p){'''
		«FOR f : p.functions SEPARATOR '\n'»
		«f.compile(indent_value)»
		«ENDFOR»'''
	}
	
	def compile (Function f, String indent){
		'''
		function «f.name»:
		read «FOR param: f.definition.input.variables SEPARATOR ', '»«param»«ENDFOR»
		%
		«indent»«f.definition.commands.command.compile(indent)»«FOR param: f.definition.commands.commands»;
		«indent»«param.compile(indent)»«ENDFOR»
		%
		write «FOR param: f.definition.output.variables SEPARATOR ', '»«param»«ENDFOR»'''
	}
	
	
	def compile (Command c, String indent){
		if(c.cmd instanceof Nop){
			(c.cmd as Nop).compile();
		}
		else if(c.cmd instanceof Affect){
			(c.cmd as Affect).compile();
		}
		else if(c.cmd instanceof If){
			(c.cmd as If).compile(indent);	
		}
		else if(c.cmd instanceof For){
			(c.cmd as For).compile(indent);
		}
		else if(c.cmd instanceof While){
			(c.cmd as While).compile(indent);
		}
		else if(c.cmd instanceof ForEach){
			(c.cmd as ForEach).compile(indent);
		}
		
	}
	
	def compile(Nop n){
		'''nop'''
	}
	
	def compile(Affect a){
		'''«a.vars.compile()»:=«a.exprs.compile()»'''	
	}
	def compile(If i, String indent){
		'''if «i.cond» then 
«indent+indent_if»«i.cmdsThen.command.compile(indent+indent_if)»«FOR param: i.cmdsThen.commands»;
«indent+indent_if»«param.compile(indent+indent_if)»«ENDFOR»
«indent»else
«indent+indent_if»«i.cmdsElse.command.compile(indent+indent_if)»«FOR param: i.cmdsElse.commands»;
«indent+indent_if»«param.compile(indent+indent_if)»«ENDFOR»
«indent»fi'''			
	}
	
	def compile(For f, String indent){
		'''for «f.cond» do
«indent+indent_for»«f.cmds.command.compile(indent+indent_for)»«FOR param: f.cmds.commands»;
«indent+indent_for»«param.compile(indent+indent_for)»«ENDFOR»
«indent»od'''		
	}
	
	
	def compile(ForEach f, String indent){
		'''foreach «f.elem» in «f.ensemb» do
«indent+indent_foreach»«f.cmds.command.compile(indent+indent_foreach)»«FOR param: f.cmds.commands»;
«indent+indent_foreach»«param.compile(indent+indent_foreach)»«ENDFOR»
«indent»od'''		
	}
	
	def compile(While w, String indent){
		'''while «w.cond» do
«indent+indent_while»«w.cmds.command.compile(indent+indent_while)»«FOR param: w.cmds.commands»;
«indent+indent_while»«param.compile(indent+indent_while)»«ENDFOR»
«indent»od'''	
	}

	def compile(Vars v){
		'''«v.^var»«FOR param: v.vars »,«param»«ENDFOR»'''
	}

	

	def compile(Exprs e){
		'''«e.expr»«FOR param: e.exprs»,«param»«ENDFOR»'''
}
	
	
	
}