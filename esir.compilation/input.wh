function decr : read X % X := (tl X) % write X

function invertTest:
read A, B, C, D, E
%
nop
%
write E, D, C, B, A

function symbolTest:
read A,B
%
	C := toto =? toto;
	D := totoh =? toto;
	E := A =? B;
	A := C =? B
	
%
write C,D,E,A


function expressionLogiqueTest:
read A,B
%
	C := (A and B) or C;
	D := C or B;
	E := F or C;
	A := F and C;
	B := G and H
	
%
write A,B,C,D,E

function whileTest:
read A
%
while A do
	A :=( decr A )
od
%
write A

function forTest:
read A,B
%
	for A do
		B := (decr B);
		A := C
	od
%
write A,B

function affectationTest:
read A,B,C
%
	A := B;
	B,A := C,B;
	C := D
	
%
write A,B,C


function ifTest:
read A, B
%
	if A then
		A := B
	else
		A := (decr B)
	fi
%
write A
function foreachTest:
read A,B
%
	C := B;
	foreach A in B do
		C := (decr C)
	od
%
write C, A

function appelFonctionTest:
read A, B, C, D, E
%
	A, B, C, D, E := (invertTest A B C D E)
%
write A, B, C, D, E
