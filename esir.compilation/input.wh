function decr : read X % X := (tl X) % write X
function incr : read X % X := (cons nil X) % write X
function add : read X, Y % S := X ; for Y do S := (incr S) od % write S

function invertTest:
read A, B, C, D, E
%
nop
%
write E, D, C, B, A

function symbolTest:
read A,B
%
	C := toto =? toto;
	D := totoh =? toto;
	E := A =? B;
	A := C =? B
	
%
write C,D,E,A


function whileTest:
read A
%
while A do
	A :=( decr A )
od
%
write A

function forTest:
read A,B
%
	for A do
		B := (decr B);
		A := C
	od
%
write A,B

function ifTest:
read A, B
%
	if A then
		A := B
	else
		A := (decr B)
	fi
%
write A
function foreachTest:
read A,B
%
	C := B;
	foreach A in B do
		C := (decr C)
	od
%
write C, A


function boucleImbrique:
read A,B
%
	while B do
		for B do
			A := (add A B)			
		od;
		B := (decr B)
	od
%
write A

function expressionLogiqueTest:
read A,B,X
%
	C := (X and ((A and B) or C));
	D := C or B or toto;
	E := F or C;
	A := F and C;
	B := G and H;
	X := not C
%
write A,B,C,D,E,X

function appelFonctionTest:
read A, B, C, D, E
%
	A, B, C, D, E := (invertTest A B C D E)
%
write A, B, C, D, E

function affectationTest:
read A,B,C
%
	A := D;
	B,A := C,B;
	C := D
	
%
write A,B,C

