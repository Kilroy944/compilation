grammar esir.compilation.Whdsl with org.eclipse.xtext.common.Terminals

generate whdsl "http://www.compilation.esir/Whdsl"

Program:
	(functions+=Function)*
;

Function:
	'function'name=SYMBOLE':'definition=Definition
;

Definition:
	input=Input'%'
	commands=Commands
	'%'output=Output
;

/*Input Output */
	
Input:
	'read' vars=Vars
;

Output:
	'write' vars=Vars
;

Vars:
	list+=VARIABLE (',' list+=VARIABLE)*
;		

/*COMMAND */


Commands:
	list+=Command (';' list+=Command)*
;

Command:
	(cmd=Nop) |
	(cmd=Affect) |
	(cmd=If) |
	(cmd=For) |
	(cmd=While) |
	(cmd=ForEach)	
;


If:
	'if' condition=Expr 'then' thenCommands=Commands ('else' elseCommands=Commands)? 'fi'
;

Affect:
	vars=Vars ':=' exprs=Exprs
;

For:
	'for' condition=Expr 'do' commands=Commands 'od'
;

While:
	'while' condition=Expr 'do' commands=Commands 'od'
;

Nop:
	nop='nop'
;

ForEach:
	'foreach' elem = Expr 'in' ensemb = Expr 'do' commands = Commands 'od'
;


/* EXPRESSIONS */
Exprs:
	list+=Expr (',' list+=Expr)*
;

// expressions séparées par des blancs, ex: (cons nil (cons nil Y))
LExpr:
	list+=Expr (list+=Expr)*
;

Expr:
	=>(simple=ExprSimple) | logique=ExprAnd
;

ExprSimple:
	nil=NIL |
	var=VARIABLE |
	sym=SYMBOLE |
	('(' (
		'cons' cons=LExpr |
		'list' list=LExpr |
		'hd' hd=Expr |
		'tl' tl=Expr |
		funcName=SYMBOLE funcParams=LExpr
	) ')')
;


ExprAnd:
    =>(expOr=ExprOr 'and' expAnd=ExprAnd) |  expOr=ExprOr
;

ExprOr:
    =>(expNot=ExprNot 'or' expOr=ExprOr) | expNot=ExprNot
;

ExprNot:
    ('not' expEqNot=ExprEq) | expEq=ExprEq
;

ExprEq:
    (expSimple=ExprSimple '=?' expSimple2=ExprSimple) | '('exp=Expr')'
;


/* TERMINAUX */
terminal NIL:
	'Nil' | 'nil'
;

terminal VARIABLE:
	('A'..'Z')('A'..'Z'|'a'..'z'|'0'..'9')*
;

terminal SYMBOLE:
	('a'..'z')('A'..'Z'|'a'..'z'|'0'..'9')*
;